<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="C:\dev\Dell_Smp\trunk\Source.UnitTests\bin\Release\Source.UnitTests.dll" total="344" errors="51" failures="13" not-run="1" inconclusive="0" ignored="1" skipped="0" invalid="0" date="2011-06-29" time="19:15:47">
  <environment nunit-version="2.5.10.11092" clr-version="2.0.50727.4952" os-version="Microsoft Windows NT 6.1.7600.0" platform="Win32NT" cwd="C:\dev\Dell_Smp\trunk\packages\NUnit.2.5.10.11092\tools" machine-name="WN7X64-BCZJ5Q1" user="Jeremy_Patton" user-domain="AMERICAS" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="Assembly" name="C:\dev\Dell_Smp\trunk\Source.UnitTests\bin\Release\Source.UnitTests.dll" executed="True" result="Failure" success="False" time="144.697" asserts="0">
    <results>
      <test-suite type="Namespace" name="AuthenticationIntegrationTests" executed="True" result="Failure" success="False" time="14.349" asserts="0">
        <results>
          <test-suite type="TestFixture" name="LoginTests" executed="True" result="Failure" success="False" time="14.343" asserts="0">
            <results>
              <test-case name="AuthenticationIntegrationTests.LoginTests.TestFacebookLogon" executed="True" result="Error" success="False" time="8.345" asserts="0">
                <failure>
                  <message><![CDATA[System.NullReferenceException : Object reference not set to an instance of an object.]]></message>
                  <stack-trace><![CDATA[at AuthenticationIntegrationTests.LoginTests.CreateProviderResponseMessage(String claimedID, String opEndpoint, String identity, AppStore appStore) in c:\dev\Dell_Smp\trunk\Source.UnitTests\Framework.OpenID.Tests\LoginTests.cs:line 419
at AuthenticationIntegrationTests.LoginTests.TestFacebookLogon() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Framework.OpenID.Tests\LoginTests.cs:line 340
]]></stack-trace>
                </failure>
              </test-case>
              <test-case name="AuthenticationIntegrationTests.LoginTests.TestGoogleLogon" executed="True" result="Error" success="False" time="3.831" asserts="0">
                <failure>
                  <message><![CDATA[System.NullReferenceException : Object reference not set to an instance of an object.]]></message>
                  <stack-trace><![CDATA[at AuthenticationIntegrationTests.LoginTests.CreateProviderResponseMessage(String claimedID, String opEndpoint, String identity, AppStore appStore) in c:\dev\Dell_Smp\trunk\Source.UnitTests\Framework.OpenID.Tests\LoginTests.cs:line 419
at AuthenticationIntegrationTests.LoginTests.TestGoogleLogon() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Framework.OpenID.Tests\LoginTests.cs:line 295
]]></stack-trace>
                </failure>
              </test-case>
              <test-case name="AuthenticationIntegrationTests.LoginTests.TestLogonReplay" executed="True" result="Error" success="False" time="0.697" asserts="0">
                <failure>
                  <message><![CDATA[System.NullReferenceException : Object reference not set to an instance of an object.]]></message>
                  <stack-trace><![CDATA[at AuthenticationIntegrationTests.LoginTests.CreateProviderResponseMessage(String claimedID, String opEndpoint, String identity, AppStore appStore) in c:\dev\Dell_Smp\trunk\Source.UnitTests\Framework.OpenID.Tests\LoginTests.cs:line 419
at AuthenticationIntegrationTests.LoginTests.TestLogonReplay() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Framework.OpenID.Tests\LoginTests.cs:line 314
]]></stack-trace>
                </failure>
              </test-case>
              <test-case name="AuthenticationIntegrationTests.LoginTests.TestYahooLogin" executed="True" result="Error" success="False" time="0.984" asserts="0">
                <failure>
                  <message><![CDATA[System.NullReferenceException : Object reference not set to an instance of an object.]]></message>
                  <stack-trace><![CDATA[at AuthenticationIntegrationTests.LoginTests.CreateProviderResponseMessage(String claimedID, String opEndpoint, String identity, AppStore appStore) in c:\dev\Dell_Smp\trunk\Source.UnitTests\Framework.OpenID.Tests\LoginTests.cs:line 419
at AuthenticationIntegrationTests.LoginTests.TestYahooLogin() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Framework.OpenID.Tests\LoginTests.cs:line 360
]]></stack-trace>
                </failure>
              </test-case>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="Namespace" name="Dell" executed="True" result="Success" success="True" time="13.346" asserts="0">
        <results>
          <test-suite type="Namespace" name="Commerce" executed="True" result="Success" success="True" time="13.343" asserts="0">
            <results>
              <test-suite type="Namespace" name="Core" executed="True" result="Success" success="True" time="4.025" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Tests" executed="True" result="Success" success="True" time="4.023" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="ContentTemplating" executed="True" result="Success" success="True" time="3.965" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="ContentTemplatingEngineTests" executed="True" result="Success" success="True" time="2.142" asserts="0">
                            <results>
                              <test-case name="Dell.Commerce.Core.Tests.ContentTemplating.ContentTemplatingEngineTests.ShouldRenderTemplate" executed="True" result="Success" success="True" time="2.092" asserts="3" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="ContentTemplatingServiceTests" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0" />
                          <test-suite type="TestFixture" name="ContentTemplatingTestsBase" executed="True" result="Inconclusive" success="False" time="0.001" asserts="0" />
                          <test-suite type="Namespace" name="Hosts" executed="True" result="Success" success="True" time="0.777" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="RazorHostTests" executed="True" result="Success" success="True" time="0.383" asserts="0">
                                <results>
                                  <test-case name="Dell.Commerce.Core.Tests.ContentTemplating.Hosts.RazorHostTests.ShouldRenderTemplate" executed="True" result="Success" success="True" time="0.350" asserts="2" />
                                  <test-case name="Dell.Commerce.Core.Tests.ContentTemplating.Hosts.RazorHostTests.ShouldThrowExceptionAfterStopped" executed="True" result="Success" success="True" time="0.008" asserts="0" />
                                  <test-case name="Dell.Commerce.Core.Tests.ContentTemplating.Hosts.RazorHostTests.ShouldThrowExceptionWhenNotStarted" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="RazorStringHostTests" executed="True" result="Success" success="True" time="0.381" asserts="0">
                                <results>
                                  <test-case name="Dell.Commerce.Core.Tests.ContentTemplating.Hosts.RazorStringHostTests.ShouldRenderTemplate" executed="True" result="Success" success="True" time="0.334" asserts="1" />
                                  <test-case name="Dell.Commerce.Core.Tests.ContentTemplating.Hosts.RazorStringHostTests.ShouldRenderTemplateToFile" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                                  <test-case name="Dell.Commerce.Core.Tests.ContentTemplating.Hosts.RazorStringHostTests.ShouldThrowExceptionFromRenderTemplateAfterStopped" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                                  <test-case name="Dell.Commerce.Core.Tests.ContentTemplating.Hosts.RazorStringHostTests.ShouldThrowExceptionFromRenderTemplateToFileAfterStopped" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                                  <test-case name="Dell.Commerce.Core.Tests.ContentTemplating.Hosts.RazorStringHostTests.ShouldThrowExceptionFromRenderTemplateToFileWhenNotStarted" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                                  <test-case name="Dell.Commerce.Core.Tests.ContentTemplating.Hosts.RazorStringHostTests.ShouldThrowExceptionFromRenderTemplateWhenNotStarted" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="RazorEngineTests" executed="True" result="Success" success="True" time="0.997" asserts="0">
                            <results>
                              <test-case name="Dell.Commerce.Core.Tests.ContentTemplating.RazorEngineTests.ShouldParseAndCompileTemplateWithAutoGenNames" executed="True" result="Success" success="True" time="0.309" asserts="5" />
                              <test-case name="Dell.Commerce.Core.Tests.ContentTemplating.RazorEngineTests.ShouldParseAndCompileTemplateWithSpecificNames" executed="True" result="Success" success="True" time="0.321" asserts="5" />
                              <test-case name="Dell.Commerce.Core.Tests.ContentTemplating.RazorEngineTests.ShouldRenderTemplateFromAssembly" executed="True" result="Success" success="True" time="0.348" asserts="2" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="EmailContactsGrabberTests" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0" />
                      <test-suite type="TestFixture" name="EncryptionServiceTests" executed="True" result="Success" success="True" time="0.026" asserts="0">
                        <results>
                          <test-case name="Dell.Commerce.Core.Tests.EncryptionServiceTests.hash_test_password" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                          <test-case name="Dell.Commerce.Core.Tests.EncryptionServiceTests.hash_values_for_same_string_should_be_the_same" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="Dell.Commerce.Core.Tests.EncryptionServiceTests.value_should_be_encrypted_and_decrypted" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Framework" executed="True" result="Success" success="True" time="5.014" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Azure" executed="True" result="Success" success="True" time="5.012" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="Tests" executed="True" result="Success" success="True" time="5.009" asserts="0">
                        <results>
                          <test-suite type="Namespace" name="Blobs" executed="True" result="Success" success="True" time="0.783" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="AzureBlobTests" executed="True" result="Success" success="True" time="0.780" asserts="0">
                                <results>
                                  <test-case name="Dell.Commerce.Framework.Azure.Tests.Blobs.AzureBlobTests.ShouldThrowExceptionWithoutBlobContainerName" executed="True" result="Success" success="True" time="0.030" asserts="6" />
                                  <test-case name="Dell.Commerce.Framework.Azure.Tests.Blobs.AzureBlobTests.ShouldThrowExceptionWithoutCloudStorageAccount" executed="True" result="Success" success="True" time="0.006" asserts="6" />
                                  <test-case name="Dell.Commerce.Framework.Azure.Tests.Blobs.AzureBlobTests.ShouldThrowExceptionWithoutConfigurationService" executed="True" result="Success" success="True" time="0.003" asserts="6" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite type="Namespace" name="Notifications" executed="True" result="Success" success="True" time="3.106" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="AzureNotificationServiceQueueTests" executed="True" result="Success" success="True" time="2.284" asserts="0">
                                <results>
                                  <test-case name="Dell.Commerce.Framework.Azure.Tests.Notifications.AzureNotificationServiceQueueTests.ShouldAddAzureNotificationMessageToQueue" executed="True" result="Success" success="True" time="1.198" asserts="0" />
                                  <test-case name="Dell.Commerce.Framework.Azure.Tests.Notifications.AzureNotificationServiceQueueTests.ShouldNotAddNotificationToQueue" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="AzureNotificationServiceRepositoryTests" executed="True" result="Success" success="True" time="0.802" asserts="0">
                                <results>
                                  <test-case name="Dell.Commerce.Framework.Azure.Tests.Notifications.AzureNotificationServiceRepositoryTests.ShouldCallRepositoryDelete" executed="True" result="Success" success="True" time="0.023" asserts="0" />
                                  <test-case name="Dell.Commerce.Framework.Azure.Tests.Notifications.AzureNotificationServiceRepositoryTests.ShouldCallRepositoryGet" executed="True" result="Success" success="True" time="0.107" asserts="0" />
                                  <test-case name="Dell.Commerce.Framework.Azure.Tests.Notifications.AzureNotificationServiceRepositoryTests.ShouldCallRepositoryGetPaged" executed="True" result="Success" success="True" time="0.010" asserts="0" />
                                  <test-case name="Dell.Commerce.Framework.Azure.Tests.Notifications.AzureNotificationServiceRepositoryTests.ShouldCallRepositorySave" executed="True" result="Success" success="True" time="0.028" asserts="0" />
                                  <test-case name="Dell.Commerce.Framework.Azure.Tests.Notifications.AzureNotificationServiceRepositoryTests.ShouldCallRepositoryUpdate" executed="True" result="Success" success="True" time="0.012" asserts="0" />
                                  <test-case name="Dell.Commerce.Framework.Azure.Tests.Notifications.AzureNotificationServiceRepositoryTests.ShouldThrowExceptionsFromConstructorWillNullParameters" executed="True" result="Success" success="True" time="0.004" asserts="2" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite type="Namespace" name="Queue" executed="True" result="Success" success="True" time="0.568" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="AzureMessageQueueTests" executed="True" result="Success" success="True" time="0.564" asserts="0">
                                <results>
                                  <test-case name="Dell.Commerce.Framework.Azure.Tests.Queue.AzureMessageQueueTests.ShouldThrowExceptionWithoutCloudQueueName" executed="True" result="Success" success="True" time="0.049" asserts="5" />
                                  <test-case name="Dell.Commerce.Framework.Azure.Tests.Queue.AzureMessageQueueTests.ShouldThrowExceptionWithoutCloudStorageAccount" executed="True" result="Success" success="True" time="0.010" asserts="5" />
                                  <test-case name="Dell.Commerce.Framework.Azure.Tests.Queue.AzureMessageQueueTests.ShouldThrowExceptionWithoutConfigurationService" executed="True" result="Success" success="True" time="0.008" asserts="5" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite type="Namespace" name="Storage" executed="True" result="Success" success="True" time="0.479" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="AzureTableRepositoryTests" executed="True" result="Success" success="True" time="0.473" asserts="0">
                                <results>
                                  <test-case name="Dell.Commerce.Framework.Azure.Tests.Storage.AzureTableRepositoryTests.ShouldThrowExceptionWithoutCloudStorageAccount" executed="True" result="Success" success="True" time="0.028" asserts="1" />
                                  <test-case name="Dell.Commerce.Framework.Azure.Tests.Storage.AzureTableRepositoryTests.ShouldThrowExceptionWithoutConfigurationService" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Test" executed="True" result="Success" success="True" time="0.997" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Core" executed="True" result="Success" success="True" time="0.788" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="CacheTest" executed="True" result="Success" success="True" time="0.538" asserts="0">
                        <results>
                          <test-case name="Dell.Commerce.Test.Core.CacheTest.store_asp_cache_should_cache_multiple_stores" executed="True" result="Success" success="True" time="0.507" asserts="5" />
                          <test-case name="Dell.Commerce.Test.Core.CacheTest.store_asp_cache_should_cache_store" executed="True" result="Success" success="True" time="0.010" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SiteKeyTest" executed="True" result="Success" success="True" time="0.198" asserts="0">
                        <results>
                          <test-case name="Dell.Commerce.Test.Core.SiteKeyTest.get_domain_and_site_key_from_url_with_ip_address" executed="True" result="Success" success="True" time="0.019" asserts="2" />
                          <test-case name="Dell.Commerce.Test.Core.SiteKeyTest.get_site_key_from_path_short_domain_name" executed="True" result="Success" success="True" time="0.004" asserts="2" />
                          <test-case name="Dell.Commerce.Test.Core.SiteKeyTest.get_site_key_from_path_with_query_string" executed="True" result="Success" success="True" time="0.004" asserts="2" />
                          <test-case name="Dell.Commerce.Test.Core.SiteKeyTest.get_site_key_from_URL_in_domain_name" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="Dell.Commerce.Test.Core.SiteKeyTest.get_site_key_from_URL_in_first_of_three_query_string_var" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                          <test-case name="Dell.Commerce.Test.Core.SiteKeyTest.get_site_key_from_URL_in_path" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                          <test-case name="Dell.Commerce.Test.Core.SiteKeyTest.get_site_key_from_URL_in_query_string" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                          <test-case name="Dell.Commerce.Test.Core.SiteKeyTest.get_site_key_from_URL_in_second_of_three_query_string_var" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="Dell.Commerce.Test.Core.SiteKeyTest.get_site_key_from_URL_in_second_query_string_var" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                          <test-case name="Dell.Commerce.Test.Core.SiteKeyTest.no_site_key_no_path" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TenantServices" executed="True" result="Success" success="True" time="0.005" asserts="0">
                        <results>
                          <test-case name="Dell.Commerce.Test.Core.TenantServices.StoreImageBlob" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="IoCBootstrap" executed="True" result="Success" success="True" time="0.172" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="IocBootTests" executed="True" result="Inconclusive" success="False" time="0.001" asserts="0" />
                      <test-suite type="TestFixture" name="RimHttpModuleTests" executed="True" result="Success" success="True" time="0.155" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="Should_exclude_requests_of_jpg" executed="True" result="Success" success="True" time="0.119" asserts="0">
                            <results>
                              <test-case name="Dell.Commerce.Test.IoCBootstrap.RimHttpModuleTests.Should_exclude_requests_of_jpg(&quot;.png&quot;)" executed="True" result="Success" success="True" time="0.014" asserts="2" />
                              <test-case name="Dell.Commerce.Test.IoCBootstrap.RimHttpModuleTests.Should_exclude_requests_of_jpg(&quot;.js&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Dell.Commerce.Test.IoCBootstrap.RimHttpModuleTests.Should_exclude_requests_of_jpg(&quot;.htc&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                              <test-case name="Dell.Commerce.Test.IoCBootstrap.RimHttpModuleTests.Should_exclude_requests_of_jpg(&quot;.ico&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                              <test-case name="Dell.Commerce.Test.IoCBootstrap.RimHttpModuleTests.Should_exclude_requests_of_jpg(&quot;.jpeg&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Dell.Commerce.Test.IoCBootstrap.RimHttpModuleTests.Should_exclude_requests_of_jpg(&quot;.pdf&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Dell.Commerce.Test.IoCBootstrap.RimHttpModuleTests.Should_exclude_requests_of_jpg(&quot;.css&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Dell.Commerce.Test.IoCBootstrap.RimHttpModuleTests.Should_exclude_requests_of_jpg(&quot;.gif&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Dell.Commerce.Test.IoCBootstrap.RimHttpModuleTests.Should_exclude_requests_of_jpg(&quot;.jpg&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                            </results>
                          </test-suite>
                          <test-case name="Dell.Commerce.Test.IoCBootstrap.RimHttpModuleTests.Should_not_exclude_regular_application_urls" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Web" executed="True" result="Success" success="True" time="3.110" asserts="0">
                <results>
                  <test-suite type="Namespace" name="UI" executed="True" result="Success" success="True" time="3.107" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="Admin" executed="True" result="Success" success="True" time="2.055" asserts="0">
                        <results>
                          <test-suite type="Namespace" name="Tests" executed="True" result="Success" success="True" time="2.051" asserts="0">
                            <results>
                              <test-suite type="Namespace" name="Controllers" executed="True" result="Success" success="True" time="2.047" asserts="0">
                                <results>
                                  <test-suite type="TestFixture" name="StoreControllerTest" executed="True" result="Success" success="True" time="1.394" asserts="0">
                                    <results>
                                      <test-case name="Dell.Commerce.Web.UI.Admin.Tests.Controllers.StoreControllerTest.Can_Create_Store" executed="True" result="Success" success="True" time="1.098" asserts="0" />
                                      <test-case name="Dell.Commerce.Web.UI.Admin.Tests.Controllers.StoreControllerTest.CheckSiteKeyExist" executed="True" result="Success" success="True" time="0.084" asserts="2" />
                                      <test-case name="Dell.Commerce.Web.UI.Admin.Tests.Controllers.StoreControllerTest.CheckStoreNameExist" executed="True" result="Success" success="True" time="0.012" asserts="2" />
                                      <test-case name="Dell.Commerce.Web.UI.Admin.Tests.Controllers.StoreControllerTest.FindStore" executed="True" result="Success" success="True" time="0.069" asserts="1" />
                                      <test-case name="Dell.Commerce.Web.UI.Admin.Tests.Controllers.StoreControllerTest.UpdateStore" executed="True" result="Success" success="True" time="0.064" asserts="1" />
                                    </results>
                                  </test-suite>
                                  <test-suite type="TestFixture" name="UserControllerTest" executed="True" result="Success" success="True" time="0.626" asserts="0">
                                    <results>
                                      <test-case name="Dell.Commerce.Web.UI.Admin.Tests.Controllers.UserControllerTest.Can_finduser_info" executed="True" result="Success" success="True" time="0.409" asserts="2" />
                                      <test-case name="Dell.Commerce.Web.UI.Admin.Tests.Controllers.UserControllerTest.Can_saveuser_info" executed="True" result="Success" success="True" time="0.073" asserts="2" />
                                      <test-case name="Dell.Commerce.Web.UI.Admin.Tests.Controllers.UserControllerTest.GetListofStores" executed="True" result="Success" success="True" time="0.080" asserts="1" />
                                      <test-case name="Dell.Commerce.Web.UI.Admin.Tests.Controllers.UserControllerTest.IsUserRegistered" executed="True" result="Success" success="True" time="0.016" asserts="2" />
                                    </results>
                                  </test-suite>
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="Tests" executed="True" result="Success" success="True" time="0.991" asserts="0">
                        <results>
                          <test-suite type="Namespace" name="Controllers" executed="True" result="Success" success="True" time="0.986" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="HomeControllerTests" executed="True" result="Success" success="True" time="0.639" asserts="0">
                                <results>
                                  <test-case name="Dell.Commerce.Web.UI.Tests.Controllers.HomeControllerTests.AboutUs" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                                  <test-case name="Dell.Commerce.Web.UI.Tests.Controllers.HomeControllerTests.QuickStartGuide" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                                  <test-case name="Dell.Commerce.Web.UI.Tests.Controllers.HomeControllerTests.Terms" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="ImageControllerTests" executed="True" result="Success" success="True" time="0.321" asserts="0">
                                <results>
                                  <test-case name="Dell.Commerce.Web.UI.Tests.Controllers.ImageControllerTests.should_call_get_image_byte_data_ini_show_action" executed="True" result="Success" success="True" time="0.173" asserts="1" />
                                  <test-case name="Dell.Commerce.Web.UI.Tests.Controllers.ImageControllerTests.should_call_get_images_for_current_user_in_get_images_for_current_user_action" executed="True" result="Success" success="True" time="0.087" asserts="1" />
                                  <test-case name="Dell.Commerce.Web.UI.Tests.Controllers.ImageControllerTests.should_call_store_image_in_ajax_upload_action" executed="True" result="Success" success="True" time="0.024" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="Namespace" name="Domain" executed="True" result="Success" success="True" time="0.664" asserts="0">
        <results>
          <test-suite type="Namespace" name="Commerce" executed="True" result="Success" success="True" time="0.659" asserts="0">
            <results>
              <test-suite type="Namespace" name="Web" executed="True" result="Success" success="True" time="0.655" asserts="0">
                <results>
                  <test-suite type="Namespace" name="UI" executed="True" result="Success" success="True" time="0.651" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="Controls" executed="True" result="Success" success="True" time="0.647" asserts="0">
                        <results>
                          <test-suite type="Namespace" name="Tests" executed="True" result="Success" success="True" time="0.643" asserts="0">
                            <results>
                              <test-suite type="Namespace" name="CollectionHelper" executed="True" result="Success" success="True" time="0.118" asserts="0">
                                <results>
                                  <test-suite type="TestFixture" name="GenericCollections" executed="True" result="Success" success="True" time="0.113" asserts="0">
                                    <results>
                                      <test-case name="Domain.Commerce.Web.UI.Controls.Tests.CollectionHelper.GenericCollections.Looping" executed="True" result="Success" success="True" time="0.108" asserts="1" />
                                    </results>
                                  </test-suite>
                                </results>
                              </test-suite>
                              <test-suite type="Namespace" name="HtmlHelper" executed="True" result="Success" success="True" time="0.310" asserts="0">
                                <results>
                                  <test-suite type="TestFixture" name="BaseRender" executed="True" result="Success" success="True" time="0.167" asserts="0">
                                    <results>
                                      <test-case name="Domain.Commerce.Web.UI.Controls.Tests.HtmlHelper.BaseRender.ConstructorFiveParameters" executed="True" result="Success" success="True" time="0.090" asserts="1" />
                                      <test-case name="Domain.Commerce.Web.UI.Controls.Tests.HtmlHelper.BaseRender.ConstructorFourParameters" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                                      <test-case name="Domain.Commerce.Web.UI.Controls.Tests.HtmlHelper.BaseRender.ConstructorNoParameters" executed="True" result="Success" success="True" time="0.009" asserts="5" />
                                      <test-case name="Domain.Commerce.Web.UI.Controls.Tests.HtmlHelper.BaseRender.ConstructorNoParametersDifferentGeneric" executed="True" result="Success" success="True" time="0.004" asserts="5" />
                                      <test-case name="Domain.Commerce.Web.UI.Controls.Tests.HtmlHelper.BaseRender.GetRenderString" executed="True" result="Success" success="True" time="0.012" asserts="1" />
                                    </results>
                                  </test-suite>
                                  <test-suite type="TestFixture" name="RenderAccordion" executed="True" result="Success" success="True" time="0.056" asserts="0">
                                    <results>
                                      <test-case name="Domain.Commerce.Web.UI.Controls.Tests.HtmlHelper.RenderAccordion.ConstructorFiveParameters" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                                      <test-case name="Domain.Commerce.Web.UI.Controls.Tests.HtmlHelper.RenderAccordion.ConstructorNoParameters" executed="True" result="Success" success="True" time="0.004" asserts="5" />
                                      <test-case name="Domain.Commerce.Web.UI.Controls.Tests.HtmlHelper.RenderAccordion.GetRenderString" executed="True" result="Success" success="True" time="0.020" asserts="1" />
                                    </results>
                                  </test-suite>
                                  <test-suite type="TestFixture" name="RenderTree" executed="True" result="Success" success="True" time="0.046" asserts="0">
                                    <results>
                                      <test-case name="Domain.Commerce.Web.UI.Controls.Tests.HtmlHelper.RenderTree.ConstructorFourParameters" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                                      <test-case name="Domain.Commerce.Web.UI.Controls.Tests.HtmlHelper.RenderTree.ConstructorNoParameters" executed="True" result="Success" success="True" time="0.004" asserts="5" />
                                      <test-case name="Domain.Commerce.Web.UI.Controls.Tests.HtmlHelper.RenderTree.GetRenderString" executed="True" result="Success" success="True" time="0.012" asserts="1" />
                                    </results>
                                  </test-suite>
                                </results>
                              </test-suite>
                              <test-suite type="Namespace" name="ScriptManager" executed="True" result="Success" success="True" time="0.121" asserts="0">
                                <results>
                                  <test-suite type="TestFixture" name="ScriptManager" executed="True" result="Success" success="True" time="0.116" asserts="0">
                                    <results>
                                      <test-case name="Domain.Commerce.Web.UI.Controls.Tests.ScriptManager.ScriptManager.ScriptAction" executed="True" result="Success" success="True" time="0.012" asserts="3" />
                                      <test-case name="Domain.Commerce.Web.UI.Controls.Tests.ScriptManager.ScriptManager.ScriptActionNullAction" executed="True" result="Success" success="True" time="0.005" asserts="3" />
                                      <test-case name="Domain.Commerce.Web.UI.Controls.Tests.ScriptManager.ScriptManager.ScriptCountNoScripts" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                                      <test-case name="Domain.Commerce.Web.UI.Controls.Tests.ScriptManager.ScriptManager.ScriptCountOneScriptAction" executed="True" result="Success" success="True" time="0.007" asserts="3" />
                                      <test-case name="Domain.Commerce.Web.UI.Controls.Tests.ScriptManager.ScriptManager.ScriptCountOneScriptString" executed="True" result="Success" success="True" time="0.006" asserts="3" />
                                      <test-case name="Domain.Commerce.Web.UI.Controls.Tests.ScriptManager.ScriptManager.ScriptString" executed="True" result="Success" success="True" time="0.005" asserts="3" />
                                      <test-case name="Domain.Commerce.Web.UI.Controls.Tests.ScriptManager.ScriptManager.ScriptStringKeyString" executed="True" result="Success" success="True" time="0.005" asserts="3" />
                                    </results>
                                  </test-suite>
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="SomeWebControlTests" executed="True" result="Inconclusive" success="False" time="0.001" asserts="0" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="Namespace" name="Framework" executed="True" result="Failure" success="False" time="4.802" asserts="0">
        <results>
          <test-suite type="Namespace" name="Import" executed="True" result="Success" success="True" time="3.184" asserts="0">
            <results>
              <test-suite type="Namespace" name="Tests" executed="True" result="Success" success="True" time="3.180" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="ImportCompilerTests" executed="True" result="Success" success="True" time="3.175" asserts="0">
                    <results>
                      <test-case name="Framework.Import.Tests.ImportCompilerTests.import_aggregate_from_csv" executed="True" result="Success" success="True" time="0.726" asserts="0" />
                      <test-case name="Framework.Import.Tests.ImportCompilerTests.import_from_blank_csv_file" executed="True" result="Success" success="True" time="0.440" asserts="0" />
                      <test-case name="Framework.Import.Tests.ImportCompilerTests.import_nothing_from_csv" executed="True" result="Success" success="True" time="0.347" asserts="0" />
                      <test-case name="Framework.Import.Tests.ImportCompilerTests.import_numeric_and_dates_from_csv" executed="True" result="Success" success="True" time="0.375" asserts="0" />
                      <test-case name="Framework.Import.Tests.ImportCompilerTests.import_single_type_from_csv" executed="True" result="Success" success="True" time="0.421" asserts="0" />
                      <test-case name="Framework.Import.Tests.ImportCompilerTests.import_three_pocos_with_an_int_from_csv" executed="True" result="Success" success="True" time="0.427" asserts="0" />
                      <test-case name="Framework.Import.Tests.ImportCompilerTests.import_using_flattened_list_of_string" executed="True" result="Success" success="True" time="0.356" asserts="0" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="Namespace" name="LocalLoginTest" executed="True" result="Failure" success="False" time="1.113" asserts="0">
            <results>
              <test-suite type="TestFixture" name="TestLocalLogin" executed="True" result="Failure" success="False" time="1.109" asserts="0">
                <results>
                  <test-case name="Framework.LocalLoginTest.TestLocalLogin.UseDirectLogin" executed="True" result="Failure" success="False" time="0.097" asserts="1">
                    <failure>
                      <message><![CDATA[  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[at Framework.LocalLoginTest.TestLocalLogin.UseDirectLogin() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Framework.LocalLoginTest\TestLocalLogin.cs:line 141
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="Framework.LocalLoginTest.TestLocalLogin.UseDirectLogonAdapter" executed="True" result="Success" success="True" time="0.633" asserts="4" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="Namespace" name="Logging" executed="True" result="Inconclusive" success="False" time="0.008" asserts="0">
            <results>
              <test-suite type="Namespace" name="Tests" executed="True" result="Inconclusive" success="False" time="0.005" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="QueueLoggingTests" executed="True" result="Inconclusive" success="False" time="0.001" asserts="0" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="Namespace" name="OpenID" executed="True" result="Success" success="True" time="0.374" asserts="0">
            <results>
              <test-suite type="Namespace" name="Tests" executed="True" result="Success" success="True" time="0.370" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="SchemeParametersTests" executed="True" result="Success" success="True" time="0.365" asserts="0">
                    <results>
                      <test-case name="Framework.OpenID.Tests.SchemeParametersTests.TestAllSchemesProduceParameters" executed="True" result="Success" success="True" time="0.359" asserts="22" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="Namespace" name="Source" executed="True" result="Failure" success="False" time="110.440" asserts="0">
        <results>
          <test-suite type="Namespace" name="UnitTests" executed="True" result="Failure" success="False" time="110.436" asserts="0">
            <results>
              <test-suite type="Namespace" name="Domain" executed="True" result="Failure" success="False" time="42.050" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Data" executed="True" result="Failure" success="False" time="3.084" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="Tests" executed="True" result="Failure" success="False" time="3.080" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="BaseTests" executed="True" result="Inconclusive" success="False" time="0.471" asserts="0" />
                          <test-suite type="Namespace" name="Context" executed="True" result="Success" success="True" time="0.959" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="ScopedContextFactoryTests" executed="True" result="Success" success="True" time="0.484" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Domain.Data.Tests.Context.ScopedContextFactoryTests.ShouldCreateThrowExceptionWithMissingConstructorParameters" executed="True" result="Success" success="True" time="0.004" asserts="3" />
                                  <test-case name="Source.UnitTests.Domain.Data.Tests.Context.ScopedContextFactoryTests.ShouldReturnNullFromCreateContextWithUnknownContextType" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="ScopedContextTests" executed="True" result="Success" success="True" time="0.454" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Domain.Data.Tests.Context.ScopedContextTests.ShouldCreateThrowExceptionWithMissingConstructorParameters" executed="True" result="Success" success="True" time="0.004" asserts="2" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite type="Namespace" name="Repository" executed="True" result="Failure" success="False" time="1.594" asserts="0">
                            <results>
                              <test-suite type="Namespace" name="Product" executed="True" result="Failure" success="False" time="1.590" asserts="0">
                                <results>
                                  <test-suite type="TestFixture" name="StoreProductFactoryTests" executed="True" result="Failure" success="False" time="1.220" asserts="0">
                                    <results>
                                      <test-case name="Source.UnitTests.Domain.Data.Tests.Repository.Product.StoreProductFactoryTests.GetPagedForSystemProductsShouldMergeProductAndStoreProductData" executed="True" result="Error" success="False" time="0.015" asserts="0">
                                        <failure>
                                          <message><![CDATA[Dell.Commerce.Framework.Services.Exceptions.ConfigurationException : ConnectionString not found
Error Code: 200
Setting Name: ProductCatalog]]></message>
                                          <stack-trace><![CDATA[at Dell.Commerce.Domain.Data.Context.ScopedContextFactory.CreateContext(ContextType contextType, ContextOption scopeOption) in c:\dev\Dell_Smp\trunk\Source\Domain.Data\Context\ScopedContextFactory.cs:line 70
at Dell.Commerce.Framework.Services.Context.ScopedContextManager.CreateScope(ContextType contextType, ContextOption scopeOption) in c:\dev\Dell_Smp\trunk\Source\Framework.Services\Context\ScopedContextManager.cs:line 122
at Dell.Commerce.Domain.Data.Repository.Products.StoreProductFactory.GetStoreProductsBySystemProducts(ProductQueryParameters parameters, PagingOptions pagingOptions, Guid storeId) in c:\dev\Dell_Smp\trunk\Source\Domain.Data\Repository\Products\StoreProductFactory.cs:line 168
at Source.UnitTests.Domain.Data.Tests.Repository.Product.StoreProductFactoryTests.GetPagedForSystemProductsShouldMergeProductAndStoreProductData() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Data.Tests\Repository\Products\StoreProductFactoryTests.cs:line 174
]]></stack-trace>
                                        </failure>
                                      </test-case>
                                      <test-case name="Source.UnitTests.Domain.Data.Tests.Repository.Product.StoreProductFactoryTests.GetPagedShouldMergeProductAndStoreProductData" executed="True" result="Error" success="False" time="0.007" asserts="0">
                                        <failure>
                                          <message><![CDATA[Dell.Commerce.Framework.Services.Exceptions.ConfigurationException : ConnectionString not found
Error Code: 200
Setting Name: Tenant]]></message>
                                          <stack-trace><![CDATA[at Dell.Commerce.Domain.Data.Context.ScopedContextFactory.GetConnection(ConnectionStringType connectionStringType) in c:\dev\Dell_Smp\trunk\Source\Domain.Data\Context\ScopedContextFactory.cs:line 94
at Dell.Commerce.Domain.Data.Context.ScopedContextFactory.CreateContext(ContextType contextType, ContextOption scopeOption) in c:\dev\Dell_Smp\trunk\Source\Domain.Data\Context\ScopedContextFactory.cs:line 68
at Dell.Commerce.Framework.Services.Context.ScopedContextManager.CreateScope(ContextType contextType, ContextOption scopeOption) in c:\dev\Dell_Smp\trunk\Source\Framework.Services\Context\ScopedContextManager.cs:line 122
at Dell.Commerce.Domain.Data.Repository.Products.StoreProductFactory.GetPaged(Expression`1 criteria, PagingOptions pagingOptions) in c:\dev\Dell_Smp\trunk\Source\Domain.Data\Repository\Products\StoreProductFactory.cs:line 93
at Source.UnitTests.Domain.Data.Tests.Repository.Product.StoreProductFactoryTests.GetPagedShouldMergeProductAndStoreProductData() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Data.Tests\Repository\Products\StoreProductFactoryTests.cs:line 157
]]></stack-trace>
                                        </failure>
                                      </test-case>
                                      <test-case name="Source.UnitTests.Domain.Data.Tests.Repository.Product.StoreProductFactoryTests.GetUniqueForSystemProductsShouldReturnHydratedStoreProduct" executed="True" result="Error" success="False" time="0.013" asserts="0">
                                        <failure>
                                          <message><![CDATA[Dell.Commerce.Framework.Services.Exceptions.ConfigurationException : ConnectionString not found
Error Code: 200
Setting Name: ProductCatalog]]></message>
                                          <stack-trace><![CDATA[at Dell.Commerce.Domain.Data.Context.ScopedContextFactory.CreateContext(ContextType contextType, ContextOption scopeOption) in c:\dev\Dell_Smp\trunk\Source\Domain.Data\Context\ScopedContextFactory.cs:line 70
at Dell.Commerce.Framework.Services.Context.ScopedContextManager.GetScopeContext(ContextType contextType, ContextOption scopeOption) in c:\dev\Dell_Smp\trunk\Source\Framework.Services\Context\ScopedContextManager.cs:line 199
at Dell.Commerce.Framework.Services.Context.ScopedContextManager.RunInScope[T](ContextType contextType, Boolean useExistingScope, Boolean autoComplete, Func`2 action) in c:\dev\Dell_Smp\trunk\Source\Framework.Services\Context\ScopedContextManager.cs:line 177
at Dell.Commerce.Domain.Data.Repository.Products.StoreProductFactory.GetUniqueForSystemProducts(Guid systemProductId, Guid storeId) in c:\dev\Dell_Smp\trunk\Source\Domain.Data\Repository\Products\StoreProductFactory.cs:line 221
at Source.UnitTests.Domain.Data.Tests.Repository.Product.StoreProductFactoryTests.GetUniqueForSystemProductsShouldReturnHydratedStoreProduct() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Data.Tests\Repository\Products\StoreProductFactoryTests.cs:line 184
]]></stack-trace>
                                        </failure>
                                      </test-case>
                                      <test-case name="Source.UnitTests.Domain.Data.Tests.Repository.Product.StoreProductFactoryTests.GetUniqueShouldReturnHydratedStoreProduct" executed="True" result="Error" success="False" time="0.008" asserts="0">
                                        <failure>
                                          <message><![CDATA[Dell.Commerce.Framework.Services.Exceptions.ConfigurationException : ConnectionString not found
Error Code: 200
Setting Name: Tenant]]></message>
                                          <stack-trace><![CDATA[at Dell.Commerce.Domain.Data.Context.ScopedContextFactory.GetConnection(ConnectionStringType connectionStringType) in c:\dev\Dell_Smp\trunk\Source\Domain.Data\Context\ScopedContextFactory.cs:line 94
at Dell.Commerce.Domain.Data.Context.ScopedContextFactory.CreateContext(ContextType contextType, ContextOption scopeOption) in c:\dev\Dell_Smp\trunk\Source\Domain.Data\Context\ScopedContextFactory.cs:line 68
at Dell.Commerce.Framework.Services.Context.ScopedContextManager.CreateScope(ContextType contextType, ContextOption scopeOption) in c:\dev\Dell_Smp\trunk\Source\Framework.Services\Context\ScopedContextManager.cs:line 122
at Dell.Commerce.Domain.Data.Repository.Products.StoreProductFactory.GetUnique[TKey](Expression`1 keyCriteria, TKey storeProductId) in c:\dev\Dell_Smp\trunk\Source\Domain.Data\Repository\Products\StoreProductFactory.cs:line 119
at Source.UnitTests.Domain.Data.Tests.Repository.Product.StoreProductFactoryTests.GetUniqueShouldReturnHydratedStoreProduct() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Data.Tests\Repository\Products\StoreProductFactoryTests.cs:line 167
]]></stack-trace>
                                        </failure>
                                      </test-case>
                                      <test-case name="Source.UnitTests.Domain.Data.Tests.Repository.Product.StoreProductFactoryTests.GetUnorderedShouldMergeProductAndStoreProductData" executed="True" result="Error" success="False" time="0.008" asserts="0">
                                        <failure>
                                          <message><![CDATA[Dell.Commerce.Framework.Services.Exceptions.ConfigurationException : ConnectionString not found
Error Code: 200
Setting Name: Tenant]]></message>
                                          <stack-trace><![CDATA[at Dell.Commerce.Domain.Data.Context.ScopedContextFactory.GetConnection(ConnectionStringType connectionStringType) in c:\dev\Dell_Smp\trunk\Source\Domain.Data\Context\ScopedContextFactory.cs:line 94
at Dell.Commerce.Domain.Data.Context.ScopedContextFactory.CreateContext(ContextType contextType, ContextOption scopeOption) in c:\dev\Dell_Smp\trunk\Source\Domain.Data\Context\ScopedContextFactory.cs:line 68
at Dell.Commerce.Framework.Services.Context.ScopedContextManager.CreateScope(ContextType contextType, ContextOption scopeOption) in c:\dev\Dell_Smp\trunk\Source\Framework.Services\Context\ScopedContextManager.cs:line 122
at Dell.Commerce.Domain.Data.Repository.Products.StoreProductFactory.Get(Expression`1 criteria) in c:\dev\Dell_Smp\trunk\Source\Domain.Data\Repository\Products\StoreProductFactory.cs:line 68
at Source.UnitTests.Domain.Data.Tests.Repository.Product.StoreProductFactoryTests.GetUnorderedShouldMergeProductAndStoreProductData() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Data.Tests\Repository\Products\StoreProductFactoryTests.cs:line 147
]]></stack-trace>
                                        </failure>
                                      </test-case>
                                    </results>
                                  </test-suite>
                                  <test-suite type="TestFixture" name="StoreProductFactoryTests+Merging_store_products_and_system_products_specs" executed="True" result="Success" success="True" time="0.343" asserts="0">
                                    <results>
                                      <test-case name="Source.UnitTests.Domain.Data.Tests.Repository.Product.StoreProductFactoryTests+Merging_store_products_and_system_products_specs.Should_have_matching_system_products_in_store_product" executed="True" result="Success" success="True" time="0.011" asserts="10" />
                                      <test-case name="Source.UnitTests.Domain.Data.Tests.Repository.Product.StoreProductFactoryTests+Merging_store_products_and_system_products_specs.Should_have_results_after_the_merge" executed="True" result="Success" success="True" time="0.017" asserts="2" />
                                      <test-case name="Source.UnitTests.Domain.Data.Tests.Repository.Product.StoreProductFactoryTests+Merging_store_products_and_system_products_specs.Should_have_the_same_number_of_system_products_before_and_after_merge" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                                    </results>
                                  </test-suite>
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Services" executed="True" result="Failure" success="False" time="38.103" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="Tests" executed="True" result="Failure" success="False" time="38.100" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="BaseTests" executed="True" result="Inconclusive" success="False" time="0.915" asserts="0" />
                          <test-suite type="TestFixture" name="ContentServiceTests" executed="True" result="Inconclusive" success="False" time="1.863" asserts="0" />
                          <test-suite type="TestFixture" name="ContentServiceTests+Delete" executed="True" result="Failure" success="False" time="1.042" asserts="0">
                            <results>
                              <test-case name="Source.UnitTests.Domain.Services.Tests.ContentServiceTests+Delete.DeleteContentShouldCallRepositoryDelete" executed="True" result="Error" success="False" time="0.054" asserts="0">
                                <failure>
                                  <message><![CDATA[Rhino.Mocks.Exceptions.ExpectationViolationException : IRepository`1.Delete(any); Expected #1, Actual #0.]]></message>
                                  <stack-trace><![CDATA[at Rhino.Mocks.RhinoMocksExtensions.AssertWasCalled[T](T mock, Action`1 action, Action`1 setupConstraints)
at Source.UnitTests.Domain.Services.Tests.ContentServiceTests.Delete.DeleteContentShouldCallRepositoryDelete() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Services.Tests\ContentServiceTests.cs:line 176
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Source.UnitTests.Domain.Services.Tests.ContentServiceTests+Delete.DeleteShouldFailWithEmptyGuid" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                              <test-case name="Source.UnitTests.Domain.Services.Tests.ContentServiceTests+Delete.DeleteShouldFailWithNullParameter" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                              <test-case name="Source.UnitTests.Domain.Services.Tests.ContentServiceTests+Delete.RemoveContentMappingToStoreProductShouldCallRepositoryDelete" executed="True" result="Error" success="False" time="0.032" asserts="0">
                                <failure>
                                  <message><![CDATA[Rhino.Mocks.Exceptions.ExpectationViolationException : IRepository`1.Delete(any); Expected #1, Actual #0.]]></message>
                                  <stack-trace><![CDATA[at Rhino.Mocks.RhinoMocksExtensions.AssertWasCalled[T](T mock, Action`1 action, Action`1 setupConstraints)
at Source.UnitTests.Domain.Services.Tests.ContentServiceTests.Delete.RemoveContentMappingToStoreProductShouldCallRepositoryDelete() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Services.Tests\ContentServiceTests.cs:line 200
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Source.UnitTests.Domain.Services.Tests.ContentServiceTests+Delete.RemoveContentMappingToStoreProductShouldFailWithEmptyGuidOrNull" executed="True" result="Success" success="True" time="0.005" asserts="4" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="ContentServiceTests+Load" executed="True" result="Failure" success="False" time="1.077" asserts="0">
                            <results>
                              <test-case name="Source.UnitTests.Domain.Services.Tests.ContentServiceTests+Load.FindContentShouldCallRepositoryGetUnique" executed="True" result="Error" success="False" time="0.107" asserts="0">
                                <failure>
                                  <message><![CDATA[Rhino.Mocks.Exceptions.ExpectationViolationException : IRepository`1.Get(any); Expected #1, Actual #0.]]></message>
                                  <stack-trace><![CDATA[at Rhino.Mocks.RhinoMocksExtensions.AssertWasCalled[T](T mock, Action`1 action, Action`1 setupConstraints)
at Rhino.Mocks.RhinoMocksExtensions.AssertWasCalled[T](T mock, Func`2 action, Action`1 setupConstraints)
at Source.UnitTests.Domain.Services.Tests.ContentServiceTests.Load.FindContentShouldCallRepositoryGetUnique() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Services.Tests\ContentServiceTests.cs:line 122
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Source.UnitTests.Domain.Services.Tests.ContentServiceTests+Load.FindContentShouldGetContent" executed="True" result="Error" success="False" time="0.027" asserts="0">
                                <failure>
                                  <message><![CDATA[System.Reflection.TargetException : Non-static method requires a target.]]></message>
                                  <stack-trace><![CDATA[at System.Reflection.RuntimeMethodInfo.CheckConsistency(Object target)
at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture, Boolean skipVisibilityChecks)
at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
at System.Reflection.RuntimePropertyInfo.GetValue(Object obj, Object[] index)
at Dell.Commerce.CommonTests.SocialMarketplaceBaseTest.AssertEqualObjects[T](T expected, T actual) in c:\dev\Dell_Smp\trunk\Source.Tests\CommonTests\SocialMarketplaceBaseTest.cs:line 234
at Source.UnitTests.Domain.Services.Tests.ContentServiceTests.Load.FindContentShouldGetContent() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Services.Tests\ContentServiceTests.cs:line 114
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Source.UnitTests.Domain.Services.Tests.ContentServiceTests+Load.FindContentShouldReturnFailedResponseWithEmptyGuid" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                              <test-case name="Source.UnitTests.Domain.Services.Tests.ContentServiceTests+Load.FindContentsShouldReturnFailedResponseWithNullStoreId" executed="True" result="Success" success="True" time="0.032" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="ContentServiceTests+Save" executed="True" result="Success" success="True" time="0.896" asserts="0">
                            <results>
                              <test-case name="Source.UnitTests.Domain.Services.Tests.ContentServiceTests+Save.SaveContentShouldReturnFailedResponseNullObject" executed="True" result="Success" success="True" time="0.035" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="Namespace" name="Framework" executed="True" result="Failure" success="False" time="0.425" asserts="0">
                            <results>
                              <test-suite type="Namespace" name="Config" executed="True" result="Failure" success="False" time="0.421" asserts="0">
                                <results>
                                  <test-suite type="Namespace" name="Tests" executed="True" result="Failure" success="False" time="0.416" asserts="0">
                                    <results>
                                      <test-suite type="TestFixture" name="AppConfigTests" executed="True" result="Failure" success="False" time="0.411" asserts="0">
                                        <results>
                                          <test-case name="Source.UnitTests.Domain.Services.Tests.Framework.Config.Tests.AppConfigTests.uncategorized_settings_should_match_unmatched_config_classes" executed="True" result="Failure" success="False" time="0.406" asserts="1">
                                            <failure>
                                              <message><![CDATA[  Expected: "Value1"
  But was:  null
]]></message>
                                              <stack-trace><![CDATA[at Source.UnitTests.Domain.Services.Tests.Framework.Config.Tests.AppConfigTests.uncategorized_settings_should_match_unmatched_config_classes() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Services.Tests\Framework.Config.Tests\AppConfigTests.cs:line 24
]]></stack-trace>
                                            </failure>
                                          </test-case>
                                        </results>
                                      </test-suite>
                                    </results>
                                  </test-suite>
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="InvitationServiceTests" executed="True" result="Failure" success="False" time="0.792" asserts="0">
                            <results>
                              <test-case name="Source.UnitTests.Domain.Services.Tests.InvitationServiceTests.BetaCodeMatchesAffiliateIdShouldCallRepositoryMethods" executed="True" result="Error" success="False" time="0.034" asserts="0">
                                <failure>
                                  <message><![CDATA[Rhino.Mocks.Exceptions.ExpectationViolationException : IRepository`1.GetUnique<System.Guid>(any, any); Expected #1, Actual #0.]]></message>
                                  <stack-trace><![CDATA[at Rhino.Mocks.RhinoMocksExtensions.AssertWasCalled[T](T mock, Action`1 action, Action`1 setupConstraints)
at Rhino.Mocks.RhinoMocksExtensions.AssertWasCalled[T](T mock, Func`2 action, Action`1 setupConstraints)
at Source.UnitTests.Domain.Services.Tests.InvitationServiceTests.BetaCodeMatchesAffiliateIdShouldCallRepositoryMethods() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Services.Tests\InvitationServiceTests.cs:line 69
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Source.UnitTests.Domain.Services.Tests.InvitationServiceTests.BetaCodeMatchesAffiliateIdShouldReturnFailedResponseWhenAlreadyProcessed" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                              <test-case name="Source.UnitTests.Domain.Services.Tests.InvitationServiceTests.BetaCodeMatchesAffiliateIdShouldReturnFailedResponseWhenInvitationNotFoundInRepository" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                              <test-case name="Source.UnitTests.Domain.Services.Tests.InvitationServiceTests.BetaCodeMatchesAffiliateIdShouldReturnFailedResponseWhenSecurityCodeDoesntMatch" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                              <test-case name="Source.UnitTests.Domain.Services.Tests.InvitationServiceTests.BetaCodeMatchesAffiliateIdShouldReturnFailedResponseWithEmptyInvitationId" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                              <test-case name="Source.UnitTests.Domain.Services.Tests.InvitationServiceTests.BetaCodeMatchesAffiliateIdShouldReturnFailedResponseWithNullInvitationId" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                              <test-case name="Source.UnitTests.Domain.Services.Tests.InvitationServiceTests.BetaCodeMatchesAffiliateIdShouldReturnFailedResponseWithNullSecurityCode" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="MembershipServiceTests" executed="True" result="Failure" success="False" time="0.853" asserts="0">
                            <results>
                              <test-case name="Source.UnitTests.Domain.Services.Tests.MembershipServiceTests.faceted_search_by_affiliate_level" executed="True" result="Failure" success="False" time="0.385" asserts="1">
                                <failure>
                                  <message><![CDATA[  Expected: True
  But was:  False
]]></message>
                                  <stack-trace><![CDATA[at Source.UnitTests.Domain.Services.Tests.MembershipServiceTests.faceted_search_by_affiliate_level() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Services.Tests\MembershipServiceTests.cs:line 75
]]></stack-trace>
                                </failure>
                              </test-case>
                            </results>
                          </test-suite>
                          <test-suite type="Namespace" name="Products" executed="True" result="Failure" success="False" time="17.299" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="BrandServiceTests" executed="True" result="Inconclusive" success="False" time="0.681" asserts="0" />
                              <test-suite type="TestFixture" name="BrandServiceTests+Load" executed="True" result="Success" success="True" time="0.713" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.BrandServiceTests+Load.FindBrandShouldCallRepositoryGetUnique" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.BrandServiceTests+Load.FindBrandShouldGetBrand" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.BrandServiceTests+Load.FindBrandShouldHaveObjectNotFoundErrorWithInvalidId" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.BrandServiceTests+Load.FindBrandShouldThrowExceptionWithEmptyGuid" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.BrandServiceTests+Load.FindBrandsShouldGetBrands" executed="True" result="Success" success="True" time="0.187" asserts="4" />
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="BrandServiceTests+Remove" executed="True" result="Success" success="True" time="0.489" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.BrandServiceTests+Remove.RemoveBrandShouldCallRepositoryDelete" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.BrandServiceTests+Remove.ShouldThrowArgumentExceptionWithEmptyGuidOnRemove" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="BrandServiceTests+Save" executed="True" result="Success" success="True" time="0.566" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.BrandServiceTests+Save.CreateBrandShouldCallRepositorySave" executed="True" result="Success" success="True" time="0.023" asserts="3" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.BrandServiceTests+Save.ShouldThrowArgumentNullExceptionWithNullObjectOnCreate" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.BrandServiceTests+Save.ShouldThrowArgumentNullExceptionWithNullObjectOnUpdate" executed="True" result="Success" success="True" time="0.009" asserts="1" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.BrandServiceTests+Save.UpdateBrandShouldCallRepositorySave" executed="True" result="Success" success="True" time="0.015" asserts="2" />
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="CouponServiceTests+Load" executed="True" result="Failure" success="False" time="0.700" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.CouponServiceTests+Load.FindCouponShouldCallRepositoryGetUnique" executed="True" result="Error" success="False" time="0.028" asserts="0">
                                    <failure>
                                      <message><![CDATA[Rhino.Mocks.Exceptions.ExpectationViolationException : IRepository`1.GetUnique<System.Guid>(any, any); Expected #1, Actual #0.]]></message>
                                      <stack-trace><![CDATA[at Rhino.Mocks.RhinoMocksExtensions.AssertWasCalled[T](T mock, Action`1 action, Action`1 setupConstraints)
at Rhino.Mocks.RhinoMocksExtensions.AssertWasCalled[T](T mock, Func`2 action, Action`1 setupConstraints)
at Source.UnitTests.Domain.Services.Tests.Products.CouponServiceTests.Load.FindCouponShouldCallRepositoryGetUnique() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Services.Tests\Products\CouponServiceTests.cs:line 63
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.CouponServiceTests+Load.FindCouponShouldGetCoupon" executed="True" result="Error" success="False" time="0.006" asserts="0">
                                    <failure>
                                      <message><![CDATA[System.Reflection.TargetException : Non-static method requires a target.]]></message>
                                      <stack-trace><![CDATA[at System.Reflection.RuntimeMethodInfo.CheckConsistency(Object target)
at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture, Boolean skipVisibilityChecks)
at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
at System.Reflection.RuntimePropertyInfo.GetValue(Object obj, Object[] index)
at Dell.Commerce.CommonTests.SocialMarketplaceBaseTest.AssertEqualObjects[T](T expected, T actual) in c:\dev\Dell_Smp\trunk\Source.Tests\CommonTests\SocialMarketplaceBaseTest.cs:line 234
at Source.UnitTests.Domain.Services.Tests.Products.CouponServiceTests.Load.FindCouponShouldGetCoupon() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Services.Tests\Products\CouponServiceTests.cs:line 56
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.CouponServiceTests+Load.FindCouponShouldHaveObjectNotFoundErrorWithInvalidId" executed="True" result="Failure" success="False" time="0.007" asserts="2">
                                    <failure>
                                      <message><![CDATA[  Expected: True
  But was:  False
]]></message>
                                      <stack-trace><![CDATA[at Source.UnitTests.Domain.Services.Tests.Products.CouponServiceTests.Load.FindCouponShouldHaveObjectNotFoundErrorWithInvalidId() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Services.Tests\Products\CouponServiceTests.cs:line 77
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.CouponServiceTests+Load.FindCouponShouldThrowExceptionWithEmptyGuid" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="CouponServiceTests+Remove" executed="True" result="Failure" success="False" time="0.537" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.CouponServiceTests+Remove.RemoveCouponShouldCallRepositoryDelete" executed="True" result="Error" success="False" time="0.021" asserts="0">
                                    <failure>
                                      <message><![CDATA[Rhino.Mocks.Exceptions.ExpectationViolationException : IRepository`1.Delete(any); Expected #1, Actual #0.]]></message>
                                      <stack-trace><![CDATA[at Rhino.Mocks.RhinoMocksExtensions.AssertWasCalled[T](T mock, Action`1 action, Action`1 setupConstraints)
at Source.UnitTests.Domain.Services.Tests.Products.CouponServiceTests.Remove.RemoveCouponShouldCallRepositoryDelete() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Services.Tests\Products\CouponServiceTests.cs:line 130
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.CouponServiceTests+Remove.ShouldThrowArgumentExceptionWithEmptyGuidOnRemove" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="CouponServiceTests+Save" executed="True" result="Failure" success="False" time="0.560" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.CouponServiceTests+Save.CreateCouponShouldCallRepositorySave" executed="True" result="Error" success="False" time="0.033" asserts="1">
                                    <failure>
                                      <message><![CDATA[Rhino.Mocks.Exceptions.ExpectationViolationException : IRepository`1.Save(Dell.Commerce.Domain.SystemCatalog.Coupon); Expected #1, Actual #0.]]></message>
                                      <stack-trace><![CDATA[at Rhino.Mocks.RhinoMocksExtensions.AssertWasCalled[T](T mock, Action`1 action, Action`1 setupConstraints)
at Source.UnitTests.Domain.Services.Tests.Products.CouponServiceTests.Save.CreateCouponShouldCallRepositorySave() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Services.Tests\Products\CouponServiceTests.cs:line 92
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.CouponServiceTests+Save.ShouldThrowArgumentNullExceptionWithNullObjectOnCreate" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.CouponServiceTests+Save.ShouldThrowArgumentNullExceptionWithNullObjectOnUpdate" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.CouponServiceTests+Save.UpdateCouponShouldCallRepositorySave" executed="True" result="Error" success="False" time="0.015" asserts="0">
                                    <failure>
                                      <message><![CDATA[Rhino.Mocks.Exceptions.ExpectationViolationException : IRepository`1.Update(equal to Dell.Commerce.Domain.SystemCatalog.Coupon, anything); Expected #1, Actual #0.]]></message>
                                      <stack-trace><![CDATA[at Rhino.Mocks.RhinoMocksExtensions.AssertWasCalled[T](T mock, Action`1 action, Action`1 setupConstraints)
at Source.UnitTests.Domain.Services.Tests.Products.CouponServiceTests.Save.UpdateCouponShouldCallRepositorySave() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Services.Tests\Products\CouponServiceTests.cs:line 112
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="ManufacturerServiceTests" executed="True" result="Inconclusive" success="False" time="0.963" asserts="0" />
                              <test-suite type="TestFixture" name="ManufacturerServiceTests+Load" executed="True" result="Success" success="True" time="0.873" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.ManufacturerServiceTests+Load.FindManufacturerShouldCallRepositoryGetUnique" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.ManufacturerServiceTests+Load.FindManufacturerShouldGetManufacturer" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.ManufacturerServiceTests+Load.FindManufacturerShouldHaveObjectNotFoundErrorWithInvalidId" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.ManufacturerServiceTests+Load.FindManufacturerShouldThrowExceptionWithEmptyGuid" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="ManufacturerServiceTests+Remove" executed="True" result="Success" success="True" time="0.739" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.ManufacturerServiceTests+Remove.RemoveManufacturerShouldCallRepositoryDelete" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.ManufacturerServiceTests+Remove.ShouldThrowArgumentExceptionWithEmptyGuidOnRemove" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="ManufacturerServiceTests+Save" executed="True" result="Failure" success="False" time="0.820" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.ManufacturerServiceTests+Save.CreateManufacturerShouldCallRepositorySave" executed="True" result="Error" success="False" time="0.023" asserts="1">
                                    <failure>
                                      <message><![CDATA[Rhino.Mocks.Exceptions.ExpectationViolationException : IRepository`1.Save(Dell.Commerce.Domain.SystemCatalog.Manufacturer); Expected #1, Actual #0.]]></message>
                                      <stack-trace><![CDATA[at Rhino.Mocks.RhinoMocksExtensions.AssertWasCalled[T](T mock, Action`1 action, Action`1 setupConstraints)
at Source.UnitTests.Domain.Services.Tests.Products.ManufacturerServiceTests.Save.CreateManufacturerShouldCallRepositorySave() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Services.Tests\Products\ManufacturerServiceTests.cs:line 131
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.ManufacturerServiceTests+Save.ShouldThrowArgumentNullExceptionWithNullObjectOnCreate" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.ManufacturerServiceTests+Save.ShouldThrowArgumentNullExceptionWithNullObjectOnUpdate" executed="True" result="Success" success="True" time="0.008" asserts="1" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.ManufacturerServiceTests+Save.UpdateManufacturerShouldCallRepositorySave" executed="True" result="Error" success="False" time="0.011" asserts="0">
                                    <failure>
                                      <message><![CDATA[Rhino.Mocks.Exceptions.ExpectationViolationException : IRepository`1.Update(equal to Dell.Commerce.Domain.SystemCatalog.Manufacturer, anything); Expected #1, Actual #0.]]></message>
                                      <stack-trace><![CDATA[at Rhino.Mocks.RhinoMocksExtensions.AssertWasCalled[T](T mock, Action`1 action, Action`1 setupConstraints)
at Source.UnitTests.Domain.Services.Tests.Products.ManufacturerServiceTests.Save.UpdateManufacturerShouldCallRepositorySave() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Services.Tests\Products\ManufacturerServiceTests.cs:line 158
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="MerchantCategoryServiceTests" executed="True" result="Inconclusive" success="False" time="0.584" asserts="0" />
                              <test-suite type="TestFixture" name="MerchantCategoryServiceTests+Load" executed="True" result="Success" success="True" time="0.659" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.MerchantCategoryServiceTests+Load.FindMerchantCategoryShouldCallRepositoryGetUnique" executed="True" result="Success" success="True" time="0.136" asserts="0" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.MerchantCategoryServiceTests+Load.FindMerchantCategoryShouldGetMerchantCategory" executed="True" result="Success" success="True" time="0.014" asserts="7" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.MerchantCategoryServiceTests+Load.FindMerchantCategoryShouldHaveFailedResponseWithEmptyGuid" executed="True" result="Success" success="True" time="0.007" asserts="1" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.MerchantCategoryServiceTests+Load.FindMerchantCategoryShouldHaveObjectNotFoundErrorWithInvalidId" executed="True" result="Success" success="True" time="0.016" asserts="2" />
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="MerchantCategoryServiceTests+Remove" executed="True" result="Success" success="True" time="0.511" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.MerchantCategoryServiceTests+Remove.RemoveMerchantCategoryShouldCallRepositoryDelete" executed="True" result="Success" success="True" time="0.019" asserts="2" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.MerchantCategoryServiceTests+Remove.ShouldThrowArgumentExceptionWithEmptyGuidOnRemove" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="MerchantCategoryServiceTests+Save" executed="True" result="Success" success="True" time="0.637" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.MerchantCategoryServiceTests+Save.CreateMerchantCategoryShouldCallRepositorySave" executed="True" result="Success" success="True" time="0.017" asserts="3" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.MerchantCategoryServiceTests+Save.SetCommissionRateShouldCallRepositoryGetUnique" executed="True" result="Success" success="True" time="0.028" asserts="2" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.MerchantCategoryServiceTests+Save.SetCommissionRateShouldCallRepositorySave" executed="True" result="Success" success="True" time="0.008" asserts="2" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.MerchantCategoryServiceTests+Save.ShouldThrowArgumentNullExceptionWithNullObjectOnCreate" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.MerchantCategoryServiceTests+Save.ShouldThrowArgumentNullExceptionWithNullObjectOnUpdate" executed="True" result="Success" success="True" time="0.012" asserts="1" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.MerchantCategoryServiceTests+Save.UpdateMerchantCategoryShouldCallRepositoryUpdate" executed="True" result="Success" success="True" time="0.011" asserts="2" />
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="MerchantServiceTests" executed="True" result="Inconclusive" success="False" time="0.612" asserts="0" />
                              <test-suite type="TestFixture" name="MerchantServiceTests+Load" executed="True" result="Failure" success="False" time="0.577" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.MerchantServiceTests+Load.FindMerchantShouldCallRepositoryGetUnique" executed="True" result="Error" success="False" time="0.026" asserts="0">
                                    <failure>
                                      <message><![CDATA[Rhino.Mocks.Exceptions.ExpectationViolationException : IRepository`1.GetUnique<System.Guid>(any, any); Expected #1, Actual #0.]]></message>
                                      <stack-trace><![CDATA[at Rhino.Mocks.RhinoMocksExtensions.AssertWasCalled[T](T mock, Action`1 action, Action`1 setupConstraints)
at Rhino.Mocks.RhinoMocksExtensions.AssertWasCalled[T](T mock, Func`2 action, Action`1 setupConstraints)
at Source.UnitTests.Domain.Services.Tests.Products.MerchantServiceTests.Load.FindMerchantShouldCallRepositoryGetUnique() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Services.Tests\Products\MerchantServiceTests.cs:line 61
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.MerchantServiceTests+Load.FindMerchantShouldGetMerchant" executed="True" result="Error" success="False" time="0.026" asserts="0">
                                    <failure>
                                      <message><![CDATA[System.Reflection.TargetException : Non-static method requires a target.]]></message>
                                      <stack-trace><![CDATA[at System.Reflection.RuntimeMethodInfo.CheckConsistency(Object target)
at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture, Boolean skipVisibilityChecks)
at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
at System.Reflection.RuntimePropertyInfo.GetValue(Object obj, Object[] index)
at Dell.Commerce.CommonTests.SocialMarketplaceBaseTest.AssertEqualObjects[T](T expected, T actual) in c:\dev\Dell_Smp\trunk\Source.Tests\CommonTests\SocialMarketplaceBaseTest.cs:line 234
at Source.UnitTests.Domain.Services.Tests.Products.MerchantServiceTests.Load.FindMerchantShouldGetMerchant() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Services.Tests\Products\MerchantServiceTests.cs:line 54
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.MerchantServiceTests+Load.FindMerchantShouldHaveFailedResponseWithEmptyGuid" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.MerchantServiceTests+Load.FindMerchantShouldHaveObjectNotFoundErrorWithInvalidId" executed="True" result="Failure" success="False" time="0.010" asserts="2">
                                    <failure>
                                      <message><![CDATA[  Expected: True
  But was:  False
]]></message>
                                      <stack-trace><![CDATA[at Source.UnitTests.Domain.Services.Tests.Products.MerchantServiceTests.Load.FindMerchantShouldHaveObjectNotFoundErrorWithInvalidId() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Services.Tests\Products\MerchantServiceTests.cs:line 76
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="MerchantServiceTests+Remove" executed="True" result="Failure" success="False" time="0.523" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.MerchantServiceTests+Remove.RemoveMerchantShouldCallRepositoryDelete" executed="True" result="Error" success="False" time="0.023" asserts="0">
                                    <failure>
                                      <message><![CDATA[Rhino.Mocks.Exceptions.ExpectationViolationException : IRepository`1.Delete(any); Expected #1, Actual #0.]]></message>
                                      <stack-trace><![CDATA[at Rhino.Mocks.RhinoMocksExtensions.AssertWasCalled[T](T mock, Action`1 action, Action`1 setupConstraints)
at Source.UnitTests.Domain.Services.Tests.Products.MerchantServiceTests.Remove.RemoveMerchantShouldCallRepositoryDelete() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Services.Tests\Products\MerchantServiceTests.cs:line 130
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.MerchantServiceTests+Remove.ShouldThrowArgumentExceptionWithEmptyGuidOnRemove" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="MerchantServiceTests+Save" executed="True" result="Failure" success="False" time="0.568" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.MerchantServiceTests+Save.CreateMerchantShouldCallRepositorySave" executed="True" result="Error" success="False" time="0.022" asserts="1">
                                    <failure>
                                      <message><![CDATA[Rhino.Mocks.Exceptions.ExpectationViolationException : IRepository`1.Save(Dell.Commerce.Domain.SystemCatalog.Merchant); Expected #1, Actual #0.]]></message>
                                      <stack-trace><![CDATA[at Rhino.Mocks.RhinoMocksExtensions.AssertWasCalled[T](T mock, Action`1 action, Action`1 setupConstraints)
at Source.UnitTests.Domain.Services.Tests.Products.MerchantServiceTests.Save.CreateMerchantShouldCallRepositorySave() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Services.Tests\Products\MerchantServiceTests.cs:line 91
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.MerchantServiceTests+Save.ShouldThrowArgumentNullExceptionWithNullObjectOnCreate" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.MerchantServiceTests+Save.ShouldThrowArgumentNullExceptionWithNullObjectOnUpdate" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.MerchantServiceTests+Save.UpdateMerchantShouldCallRepositorySave" executed="True" result="Error" success="False" time="0.019" asserts="0">
                                    <failure>
                                      <message><![CDATA[Rhino.Mocks.Exceptions.ExpectationViolationException : IRepository`1.Update(equal to Dell.Commerce.Domain.SystemCatalog.Merchant, anything); Expected #1, Actual #0.]]></message>
                                      <stack-trace><![CDATA[at Rhino.Mocks.RhinoMocksExtensions.AssertWasCalled[T](T mock, Action`1 action, Action`1 setupConstraints)
at Source.UnitTests.Domain.Services.Tests.Products.MerchantServiceTests.Save.UpdateMerchantShouldCallRepositorySave() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Services.Tests\Products\MerchantServiceTests.cs:line 111
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="ProductOfferServiceTests" executed="True" result="Inconclusive" success="False" time="0.741" asserts="0" />
                              <test-suite type="TestFixture" name="ProductOfferServiceTests+Load" executed="True" result="Failure" success="False" time="0.450" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.ProductOfferServiceTests+Load.FindProductOffersByMerchantShouldCallRepository" executed="True" result="Failure" success="False" time="0.027" asserts="1">
                                    <failure>
                                      <message><![CDATA[  Expected: True
  But was:  False
]]></message>
                                      <stack-trace><![CDATA[at Source.UnitTests.Domain.Services.Tests.Products.ProductOfferServiceTests.Load.FindProductOffersByMerchantShouldCallRepository() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Services.Tests\Products\ProductOfferServiceTests.cs:line 107
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="ProductServiceTests" executed="True" result="Inconclusive" success="False" time="0.593" asserts="0" />
                              <test-suite type="TestFixture" name="ProductServiceTests+Load" executed="True" result="Inconclusive" success="False" time="0.381" asserts="0" />
                              <test-suite type="TestFixture" name="ProductServiceTests+OnPoll" executed="True" result="Failure" success="False" time="0.439" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.ProductServiceTests+OnPoll.TermResearchShouldSubmitWithNoTaxonomyNodeIdOnce" executed="True" result="Failure" success="False" time="0.014" asserts="1">
                                    <failure>
                                      <message><![CDATA[  Expected: True
  But was:  False
]]></message>
                                      <stack-trace><![CDATA[at Source.UnitTests.Domain.Services.Tests.Products.ProductServiceTests.OnPoll.TermResearchShouldSubmitWithNoTaxonomyNodeIdOnce() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Services.Tests\Products\ProductServiceTests.cs:line 305
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.ProductServiceTests+OnPoll.TermResearchShouldSubmitWithTaxonomyNodeIdMultiTimes" executed="True" result="Failure" success="False" time="0.012" asserts="1">
                                    <failure>
                                      <message><![CDATA[  Expected: True
  But was:  False
]]></message>
                                      <stack-trace><![CDATA[at Source.UnitTests.Domain.Services.Tests.Products.ProductServiceTests.OnPoll.TermResearchShouldSubmitWithTaxonomyNodeIdMultiTimes() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Services.Tests\Products\ProductServiceTests.cs:line 329
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.ProductServiceTests+OnPoll.TermResearchShouldSubmitWithTaxonomyNodeIdOnce" executed="True" result="Failure" success="False" time="0.015" asserts="1">
                                    <failure>
                                      <message><![CDATA[  Expected: True
  But was:  False
]]></message>
                                      <stack-trace><![CDATA[at Source.UnitTests.Domain.Services.Tests.Products.ProductServiceTests.OnPoll.TermResearchShouldSubmitWithTaxonomyNodeIdOnce() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Services.Tests\Products\ProductServiceTests.cs:line 352
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="ProductServiceTests+Remove" executed="True" result="Failure" success="False" time="0.417" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.ProductServiceTests+Remove.RemoveProductShouldCallRepositoryDelete" executed="True" result="Error" success="False" time="0.029" asserts="0">
                                    <failure>
                                      <message><![CDATA[Rhino.Mocks.Exceptions.ExpectationViolationException : IRepository`1.Delete(any); Expected #1, Actual #0.]]></message>
                                      <stack-trace><![CDATA[at Rhino.Mocks.RhinoMocksExtensions.AssertWasCalled[T](T mock, Action`1 action, Action`1 setupConstraints)
at Source.UnitTests.Domain.Services.Tests.Products.ProductServiceTests.Remove.RemoveProductShouldCallRepositoryDelete() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Services.Tests\Products\ProductServiceTests.cs:line 278
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.ProductServiceTests+Remove.ShouldFailWithEmptyGuidOnRemove" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="ProductServiceTests+Save" executed="True" result="Failure" success="False" time="0.468" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.ProductServiceTests+Save.CreateProductShouldCallRepositorySave" executed="True" result="Failure" success="False" time="0.027" asserts="1">
                                    <failure>
                                      <message><![CDATA[  Expected: True
  But was:  False
]]></message>
                                      <stack-trace><![CDATA[at Source.UnitTests.Domain.Services.Tests.Products.ProductServiceTests.Save.CreateProductShouldCallRepositorySave() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Services.Tests\Products\ProductServiceTests.cs:line 234
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.ProductServiceTests+Save.ShouldFailWithNullObjectOnCreate" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.ProductServiceTests+Save.ShouldFailWithNullObjectOnUpdate" executed="True" result="Success" success="True" time="0.009" asserts="1" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.ProductServiceTests+Save.UpdateProductShouldCallRepositorySave" executed="True" result="Error" success="False" time="0.016" asserts="0">
                                    <failure>
                                      <message><![CDATA[Rhino.Mocks.Exceptions.ExpectationViolationException : IRepository`1.Update(equal to Dell.Commerce.Domain.SystemCatalog.SystemProduct, anything); Expected #1, Actual #0.]]></message>
                                      <stack-trace><![CDATA[at Rhino.Mocks.RhinoMocksExtensions.AssertWasCalled[T](T mock, Action`1 action, Action`1 setupConstraints)
at Source.UnitTests.Domain.Services.Tests.Products.ProductServiceTests.Save.UpdateProductShouldCallRepositorySave() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Services.Tests\Products\ProductServiceTests.cs:line 264
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="StoreProductServiceTests" executed="True" result="Failure" success="False" time="1.031" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.StoreProductServiceTests.FindProductsByKeywordShouldMatchBrand" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Products.StoreProductServiceTests.RemoveProductShouldCallDependentDeleteMethods" executed="True" result="Error" success="False" time="0.039" asserts="0">
                                    <failure>
                                      <message><![CDATA[Rhino.Mocks.Exceptions.ExpectationViolationException : IContentService.RemoveContentMappingToStoreProduct(b66c646e-d68f-4259-b889-b1f984c1fcd5); Expected #1, Actual #0.]]></message>
                                      <stack-trace><![CDATA[at Rhino.Mocks.RhinoMocksExtensions.AssertWasCalled[T](T mock, Action`1 action, Action`1 setupConstraints)
at Rhino.Mocks.RhinoMocksExtensions.AssertWasCalled[T](T mock, Func`2 action, Action`1 setupConstraints)
at Source.UnitTests.Domain.Services.Tests.Products.StoreProductServiceTests.RemoveProductShouldCallDependentDeleteMethods() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Services.Tests\Products\StoreProductServiceTests.cs:line 328
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite type="Namespace" name="Seo" executed="True" result="Success" success="True" time="2.758" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="BacklinkWorkerRoleTests" executed="True" result="Inconclusive" success="False" time="1.189" asserts="0" />
                              <test-suite type="TestFixture" name="BacklinkWorkerRoleTests+Run" executed="True" result="Success" success="True" time="0.891" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Seo.BacklinkWorkerRoleTests+Run.OnPollShouldSubmitToBlekkoAndSave" executed="True" result="Success" success="True" time="0.035" asserts="0" />
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="TextAnalyzerHelperTests" executed="True" result="Success" success="True" time="0.630" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Seo.TextAnalyzerHelperTests.GeneratedListsNotNullTest" executed="True" result="Success" success="True" time="0.004" asserts="2" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Seo.TextAnalyzerHelperTests.GenerateKeyWordInfoForMessageIsAnalyzedTest" executed="True" result="Success" success="True" time="0.148" asserts="2" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Seo.TextAnalyzerHelperTests.HealthTest" executed="True" result="Success" success="True" time="0.073" asserts="1" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Seo.TextAnalyzerHelperTests.PlainTextNotNullText" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.Seo.TextAnalyzerHelperTests.WordCount" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite type="Namespace" name="SEO" executed="True" result="Failure" success="False" time="4.506" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="ProductHealthHelperTests" executed="True" result="Failure" success="False" time="2.552" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.SEO.ProductHealthHelperTests.ContentCompletionTest" executed="True" result="Success" success="True" time="0.081" asserts="1" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.SEO.ProductHealthHelperTests.HealthTest" executed="True" result="Error" success="False" time="0.093" asserts="0">
                                    <failure>
                                      <message><![CDATA[Dell.Commerce.Framework.Services.Exceptions.ConfigurationException : ConnectionString not found
Error Code: 200
Setting Name: Tenant]]></message>
                                      <stack-trace><![CDATA[at Dell.Commerce.Domain.Data.Context.ScopedContextFactory.GetConnection(ConnectionStringType connectionStringType) in c:\dev\Dell_Smp\trunk\Source\Domain.Data\Context\ScopedContextFactory.cs:line 94
at Dell.Commerce.Domain.Data.Context.ScopedContextFactory.CreateContext(ContextType contextType, ContextOption scopeOption) in c:\dev\Dell_Smp\trunk\Source\Domain.Data\Context\ScopedContextFactory.cs:line 68
at Dell.Commerce.Framework.Services.Context.ScopedContextManager.CreateScope(ContextType contextType, ContextOption scopeOption) in c:\dev\Dell_Smp\trunk\Source\Framework.Services\Context\ScopedContextManager.cs:line 122
at Dell.Commerce.Domain.Services.Seo.ProductHealthHelper.GetCountContentTemplateTypeId(Guid storeproductid, Int32& totalpreferredtypes, Int32& totalfoundtypes) in c:\dev\Dell_Smp\trunk\Source\Domain.Services\Seo\ProductHealthHelper.cs:line 771
at Dell.Commerce.Domain.Services.Seo.ProductHealthHelper.GetNeedsBlogPost() in c:\dev\Dell_Smp\trunk\Source\Domain.Services\Seo\ProductHealthHelper.cs:line 579
at Dell.Commerce.Domain.Services.Seo.ProductHealthHelper.GetHealth(Int32 maxSuggestions) in c:\dev\Dell_Smp\trunk\Source\Domain.Services\Seo\ProductHealthHelper.cs:line 162
at Dell.Commerce.Domain.Services.Seo.SeoHealthAndScoresService.GetProductHealth(String longDescription, String shortDescription, Nullable`1 storeProductId) in c:\dev\Dell_Smp\trunk\Source\Domain.Services\Seo\SeoHealthAndScoresService.cs:line 288
at Source.UnitTests.Domain.Services.Tests.SEO.ProductHealthHelperTests.HealthTest() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Services.Tests\SEO\ProductHealthHelperTests.cs:line 281
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.SEO.ProductHealthHelperTests.ScoreTest" executed="False" result="Ignored">
                                    <reason>
                                      <message><![CDATA[Ignore this test]]></message>
                                    </reason>
                                  </test-case>
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="StoreHealthHelperTests" executed="True" result="Success" success="True" time="1.001" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.SEO.StoreHealthHelperTests.FocusTest" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.SEO.StoreHealthHelperTests.NewProductFocusTest" executed="True" result="Success" success="True" time="0.060" asserts="1" />
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.SEO.StoreHealthHelperTests.Should_call_the_store_product_service_for_paged_data" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="TermAnalysisServiceTests" executed="True" result="Success" success="True" time="0.900" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Domain.Services.Tests.SEO.TermAnalysisServiceTests.TestTermAnalysis" executed="True" result="Success" success="True" time="0.045" asserts="0" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="SeoServiceTests" executed="True" result="Inconclusive" success="False" time="0.499" asserts="0" />
                          <test-suite type="TestFixture" name="SeoServiceTests+Delete" executed="True" result="Inconclusive" success="False" time="0.419" asserts="0" />
                          <test-suite type="TestFixture" name="SeoServiceTests+Load" executed="True" result="Inconclusive" success="False" time="0.463" asserts="0" />
                          <test-suite type="TestFixture" name="SeoServiceTests+Save" executed="True" result="Inconclusive" success="False" time="0.481" asserts="0" />
                          <test-suite type="TestFixture" name="SiteSessionServiceTests" executed="True" result="Success" success="True" time="0.130" asserts="0">
                            <results>
                              <test-case name="Source.UnitTests.Domain.Services.Tests.SiteSessionServiceTests.create_site_session_should_call_repository" executed="True" result="Success" success="True" time="0.092" asserts="1" />
                              <test-case name="Source.UnitTests.Domain.Services.Tests.SiteSessionServiceTests.create_site_session_should_return_no_success_on_exception" executed="True" result="Success" success="True" time="0.018" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="StringServiceTests" executed="True" result="Success" success="True" time="0.220" asserts="0">
                            <results>
                              <test-case name="Source.UnitTests.Domain.Services.Tests.StringServiceTests.TestStringService" executed="True" result="Success" success="True" time="0.163" asserts="2" />
                              <test-case name="Source.UnitTests.Domain.Services.Tests.StringServiceTests.TestStringServiceWithLookupReplacement" executed="True" result="Success" success="True" time="0.004" asserts="2" />
                              <test-case name="Source.UnitTests.Domain.Services.Tests.StringServiceTests.TestStringServiceWithNumberReplacement" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                              <test-case name="Source.UnitTests.Domain.Services.Tests.StringServiceTests.TestStringServiceWithSimpleReplacement" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="TrafficServiceTests" executed="True" result="Inconclusive" success="False" time="1.194" asserts="0" />
                          <test-suite type="TestFixture" name="TrafficServiceTests+Load" executed="True" result="Failure" success="False" time="0.911" asserts="0">
                            <results>
                              <test-case name="Source.UnitTests.Domain.Services.Tests.TrafficServiceTests+Load.FindShouldCallRepositoryMethods" executed="True" result="Error" success="False" time="0.042" asserts="0">
                                <failure>
                                  <message><![CDATA[Rhino.Mocks.Exceptions.ExpectationViolationException : IRepository`1.Get(any); Expected #1, Actual #0.]]></message>
                                  <stack-trace><![CDATA[at Rhino.Mocks.RhinoMocksExtensions.AssertWasCalled[T](T mock, Action`1 action, Action`1 setupConstraints)
at Rhino.Mocks.RhinoMocksExtensions.AssertWasCalled[T](T mock, Func`2 action, Action`1 setupConstraints)
at Source.UnitTests.Domain.Services.Tests.TrafficServiceTests.Load.FindShouldCallRepositoryMethods() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Services.Tests\TrafficServiceTests.cs:line 93
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Source.UnitTests.Domain.Services.Tests.TrafficServiceTests+Load.FindUsingTenantShouldReturnedFailedResponseWithEmptyStoreId" executed="True" result="Success" success="True" time="0.004" asserts="2" />
                              <test-case name="Source.UnitTests.Domain.Services.Tests.TrafficServiceTests+Load.FindUsingTenantShouldReturnedFailedResponseWithEmptyStoreId2" executed="True" result="Success" success="True" time="0.016" asserts="2" />
                              <test-case name="Source.UnitTests.Domain.Services.Tests.TrafficServiceTests+Load.FindUsingTenantShouldReturnedFailedResponseWithEmptyStoreProductId" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                              <test-case name="Source.UnitTests.Domain.Services.Tests.TrafficServiceTests+Load.FindUsingTenantShouldReturnedFailedResponseWithEmptyTenantId" executed="True" result="Success" success="True" time="0.004" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="TrafficServiceTests+Remove" executed="True" result="Failure" success="False" time="0.841" asserts="0">
                            <results>
                              <test-case name="Source.UnitTests.Domain.Services.Tests.TrafficServiceTests+Remove.RemoveByStoreProductIdShouldCallRepositoryDelete" executed="True" result="Failure" success="False" time="0.018" asserts="2">
                                <failure>
                                  <message><![CDATA[  Expected: True
  But was:  False
]]></message>
                                  <stack-trace><![CDATA[at Source.UnitTests.Domain.Services.Tests.TrafficServiceTests.Remove.RemoveByStoreProductIdShouldCallRepositoryDelete() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Domain.Services.Tests\TrafficServiceTests.cs:line 138
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Source.UnitTests.Domain.Services.Tests.TrafficServiceTests+Remove.RemoveByStoreProductIdShouldFailWithEmptyGuid" executed="True" result="Success" success="True" time="0.005" asserts="4" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Tests" executed="True" result="Success" success="True" time="0.492" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="MockDomainTest" executed="True" result="Success" success="True" time="0.486" asserts="0">
                        <results>
                          <test-case name="Source.UnitTests.Domain.Tests.MockDomainTest.TestBasicTypeExtensions" executed="True" result="Success" success="True" time="0.009" asserts="8" />
                          <test-case name="Source.UnitTests.Domain.Tests.MockDomainTest.TestMockMembership" executed="True" result="Success" success="True" time="0.008" asserts="0" />
                          <test-case name="Source.UnitTests.Domain.Tests.MockDomainTest.TestMockStoreProductCatalog" executed="True" result="Success" success="True" time="0.375" asserts="1" />
                          <test-case name="Source.UnitTests.Domain.Tests.MockDomainTest.TestMockTenantProductCatalog" executed="True" result="Success" success="True" time="0.053" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Framework" executed="True" result="Failure" success="False" time="43.443" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Logging" executed="True" result="Failure" success="False" time="40.866" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="Tests" executed="True" result="Failure" success="False" time="40.862" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="LogManagerTests" executed="True" result="Failure" success="False" time="40.858" asserts="0">
                            <results>
                              <test-case name="Source.UnitTests.Framework.Logging.Tests.LogManagerTests.multiple_configured_loggers_should_log_right_levels_and_categories" executed="True" result="Success" success="True" time="0.518" asserts="0" />
                              <test-case name="Source.UnitTests.Framework.Logging.Tests.LogManagerTests.single_configured_logger_should_log" executed="True" result="Error" success="False" time="0.370" asserts="0">
                                <failure>
                                  <message><![CDATA[Rhino.Mocks.Exceptions.ExpectationViolationException : LoggingDetector.Logged(Source.UnitTests.Framework.Logging.Tests.TestLogger1, Debug, "TestCategory1", "Test", "Debug", 1, null, null); Expected #1, Actual #0.
LoggingDetector.Logged(Source.UnitTests.Framework.Logging.Tests.TestLogger1, Info, "TestCategory1", "Test", "Info", 1, null, null); Expected #1, Actual #0.
LoggingDetector.Logged(Source.UnitTests.Framework.Logging.Tests.TestLogger1, Warning, "TestCategory1", "Test", "Warning", 1, null, null); Expected #1, Actual #0.
LoggingDetector.Logged(Source.UnitTests.Framework.Logging.Tests.TestLogger1, Error, "TestCategory1", "Test", "Error", 1, null, null); Expected #1, Actual #0.
LoggingDetector.Logged(Source.UnitTests.Framework.Logging.Tests.TestLogger1, Fatal, "TestCategory1", "Test", "Fatal", 1, null, null); Expected #1, Actual #0.]]></message>
                                  <stack-trace><![CDATA[at Rhino.Mocks.MockRepository.VerifyAll()
at Source.UnitTests.Framework.Logging.Tests.LogManagerTests.single_configured_logger_should_log() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Framework.Logging.Tests\LogManagerTests.cs:line 322
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Source.UnitTests.Framework.Logging.Tests.LogManagerTests.single_configured_logger_should_log_right_levels_and_categories" executed="True" result="Success" success="True" time="0.375" asserts="0" />
                              <test-case name="Source.UnitTests.Framework.Logging.Tests.LogManagerTests.single_configured_logger_with_categories_should_log_right_categories" executed="True" result="Success" success="True" time="0.375" asserts="0" />
                              <test-case name="Source.UnitTests.Framework.Logging.Tests.LogManagerTests.single_configured_logger_with_minlevel_should_log_right_levels" executed="True" result="Success" success="True" time="0.378" asserts="0" />
                              <test-case name="Source.UnitTests.Framework.Logging.Tests.LogManagerTests.test_service_logging_should_work" executed="True" result="Error" success="False" time="9.922" asserts="0">
                                <failure>
                                  <message><![CDATA[Rhino.Mocks.Exceptions.ExpectationViolationException : LoggingDetector.Logged(Source.UnitTests.Framework.Logging.Tests.TestLogger1, Debug, "TestService", "StringValue0", 1, null, null, null); Expected #1, Actual #0.]]></message>
                                  <stack-trace><![CDATA[
Server stack trace:
at Rhino.Mocks.MockRepository.VerifyAll()
at Source.UnitTests.Framework.Logging.Tests.LogManagerTests.do_test_service_using_logging() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Framework.Logging.Tests\LogManagerTests.cs:line 124
at System.Runtime.Remoting.Messaging.StackBuilderSink._PrivateProcessMessage(IntPtr md, Object[] args, Object server, Int32 methodPtr, Boolean fExecuteInContext, Object[]& outArgs)
at System.Runtime.Remoting.Messaging.StackBuilderSink.SyncProcessMessage(IMessage msg, Int32 methodPtr, Boolean fExecuteInContext)

Exception rethrown at [0]:
at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg)
at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(MessageData& msgData, Int32 type)
at Source.UnitTests.Framework.Logging.Tests.LogManagerTests.do_test_service_using_logging()
at Source.UnitTests.Framework.Logging.Tests.LogManagerTests.test_service_logging_should_work() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Framework.Logging.Tests\LogManagerTests.cs:line 97
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Source.UnitTests.Framework.Logging.Tests.LogManagerTests.test_service_logging_with_debug_disabled_should_not_log" executed="True" result="Success" success="True" time="0.026" asserts="0" />
                              <test-case name="Source.UnitTests.Framework.Logging.Tests.LogManagerTests.test_service_logging_with_multiple_loggers" executed="True" result="Failure" success="False" time="9.876" asserts="0">
                                <failure>
                                  <message><![CDATA[  Expected: False
  But was:  True
]]></message>
                                  <stack-trace><![CDATA[
Server stack trace:
at System.Runtime.Remoting.Messaging.StackBuilderSink._PrivateProcessMessage(IntPtr md, Object[] args, Object server, Int32 methodPtr, Boolean fExecuteInContext, Object[]& outArgs)
at System.Runtime.Remoting.Messaging.StackBuilderSink.SyncProcessMessage(IMessage msg, Int32 methodPtr, Boolean fExecuteInContext)

Exception rethrown at [0]:
at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg)
at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(MessageData& msgData, Int32 type)
at Source.UnitTests.Framework.Logging.Tests.LogManagerTests.do_test_service_with_multiple_loggers()
at Source.UnitTests.Framework.Logging.Tests.LogManagerTests.test_service_logging_with_multiple_loggers() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Framework.Logging.Tests\LogManagerTests.cs:line 213
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Source.UnitTests.Framework.Logging.Tests.LogManagerTests.test_service_logging_with_unmatched_category_filter_should_not_log_but_DebugLog_should_be_enabled" executed="True" result="Failure" success="False" time="9.166" asserts="0">
                                <failure>
                                  <message><![CDATA[  Expected: False
  But was:  True
]]></message>
                                  <stack-trace><![CDATA[
Server stack trace:
at System.Runtime.Remoting.Messaging.StackBuilderSink._PrivateProcessMessage(IntPtr md, Object[] args, Object server, Int32 methodPtr, Boolean fExecuteInContext, Object[]& outArgs)
at System.Runtime.Remoting.Messaging.StackBuilderSink.SyncProcessMessage(IMessage msg, Int32 methodPtr, Boolean fExecuteInContext)

Exception rethrown at [0]:
at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg)
at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(MessageData& msgData, Int32 type)
at Source.UnitTests.Framework.Logging.Tests.LogManagerTests.do_test_service_logging_with_unmatched_category_filter()
at Source.UnitTests.Framework.Logging.Tests.LogManagerTests.test_service_logging_with_unmatched_category_filter_should_not_log_but_DebugLog_should_be_enabled() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Framework.Logging.Tests\LogManagerTests.cs:line 174
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Source.UnitTests.Framework.Logging.Tests.LogManagerTests.test_service_with_multiple_nodebug_loggers" executed="True" result="Success" success="True" time="9.733" asserts="0" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Services" executed="True" result="Success" success="True" time="2.507" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="Tests" executed="True" result="Success" success="True" time="2.503" asserts="0">
                        <results>
                          <test-suite type="Namespace" name="WorkerRoles" executed="True" result="Success" success="True" time="2.497" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="MultiThreadedWorkerRoleTests" executed="True" result="Success" success="True" time="0.613" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Framework.Services.Tests.WorkerRoles.MultiThreadedWorkerRoleTests.ShouldCallOnStartRunAndOnStop" executed="True" result="Success" success="True" time="0.035" asserts="0" />
                                  <test-case name="Source.UnitTests.Framework.Services.Tests.WorkerRoles.MultiThreadedWorkerRoleTests.ShouldThrowExceptionWithInvalidConstructorParameters" executed="True" result="Success" success="True" time="0.004" asserts="2" />
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="MultiThreadedWorkerRoleWorkerTests" executed="True" result="Success" success="True" time="0.673" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Framework.Services.Tests.WorkerRoles.MultiThreadedWorkerRoleWorkerTests.ShouldCallOnRunFromRun" executed="True" result="Success" success="True" time="0.068" asserts="0" />
                                  <test-case name="Source.UnitTests.Framework.Services.Tests.WorkerRoles.MultiThreadedWorkerRoleWorkerTests.ShouldNotSuppressSystemExceptions" executed="True" result="Success" success="True" time="0.007" asserts="1" />
                                  <test-case name="Source.UnitTests.Framework.Services.Tests.WorkerRoles.MultiThreadedWorkerRoleWorkerTests.ShouldReturnTrueFromOnStart" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                                  <test-case name="Source.UnitTests.Framework.Services.Tests.WorkerRoles.MultiThreadedWorkerRoleWorkerTests.ShouldSuppressNonSystemExceptions" executed="True" result="Success" success="True" time="0.005" asserts="0" />
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="QueueWorkerRoleTests" executed="True" result="Success" success="True" time="0.544" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Framework.Services.Tests.WorkerRoles.QueueWorkerRoleTests.ShouldThrowExceptionWithInvalidConstructorParameters" executed="True" result="Success" success="True" time="0.004" asserts="3" />
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="WorkerRoleTests" executed="True" result="Success" success="True" time="0.608" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Framework.Services.Tests.WorkerRoles.WorkerRoleTests.ShouldCallOnRunFromRun" executed="True" result="Success" success="True" time="0.065" asserts="0" />
                                  <test-case name="Source.UnitTests.Framework.Services.Tests.WorkerRoles.WorkerRoleTests.ShouldReturnTrueFromOnStart" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="SeoTest" executed="True" result="Inconclusive" success="False" time="0.005" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="SeoControllerTest" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Store" executed="True" result="Success" success="True" time="2.994" asserts="0">
                <results>
                  <test-suite type="Namespace" name="ClientApi" executed="True" result="Success" success="True" time="2.990" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="Blogs" executed="True" result="Success" success="True" time="0.570" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="ContentManagerTests" executed="True" result="Success" success="True" time="0.566" asserts="0">
                            <results>
                              <test-case name="Source.UnitTests.Store.ClientApi.Blogs.ContentManagerTests.Should_call_the_content_service_to_get_a_list_of_blog_items" executed="True" result="Success" success="True" time="0.390" asserts="0" />
                              <test-case name="Source.UnitTests.Store.ClientApi.Blogs.ContentManagerTests.Should_map_the_content_data_from_the_data_retrieved" executed="True" result="Success" success="True" time="0.124" asserts="1" />
                              <test-case name="Source.UnitTests.Store.ClientApi.Blogs.ContentManagerTests.Should_return_the_response_object_with_any_error_messages_on_failure" executed="True" result="Success" success="True" time="0.018" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="PotentialTransaction" executed="True" result="Inconclusive" success="False" time="0.006" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="PotentialTransactionManagerTests" executed="True" result="Inconclusive" success="False" time="0.001" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="Routing" executed="True" result="Success" success="True" time="1.125" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="DependencyRouteConstraintTests" executed="True" result="Success" success="True" time="0.243" asserts="0">
                            <results>
                              <test-case name="Source.UnitTests.Store.ClientApi.Routing.DependencyRouteConstraintTests.Should_have_run_all_dependancies" executed="True" result="Success" success="True" time="0.223" asserts="1" />
                              <test-case name="Source.UnitTests.Store.ClientApi.Routing.DependencyRouteConstraintTests.Should_match_each_of_the_constraints" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="ProductItemConstraintTests" executed="True" result="Success" success="True" time="0.182" asserts="0">
                            <results>
                              <test-case name="Source.UnitTests.Store.ClientApi.Routing.ProductItemConstraintTests.Should_check_product_constraint_if_passes_slash_constraint" executed="True" result="Success" success="True" time="0.143" asserts="1" />
                              <test-case name="Source.UnitTests.Store.ClientApi.Routing.ProductItemConstraintTests.Should_not_call_product_constraint_if_fails_slash_constraint" executed="True" result="Success" success="True" time="0.023" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="StoreProductSlugConstraintTests" executed="True" result="Success" success="True" time="0.576" asserts="0">
                            <results>
                              <test-case name="Source.UnitTests.Store.ClientApi.Routing.StoreProductSlugConstraintTests.Should_be_able_to_get_slug_from_url" executed="True" result="Success" success="True" time="0.571" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="UrlShouldEndInSlashConstraintTests" executed="True" result="Success" success="True" time="0.056" asserts="0">
                            <results>
                              <test-case name="Source.UnitTests.Store.ClientApi.Routing.UrlShouldEndInSlashConstraintTests.Should_redirect_if_the_url_does_not_end_with_a_slash" executed="True" result="Success" success="True" time="0.033" asserts="1" />
                              <test-case name="Source.UnitTests.Store.ClientApi.Routing.UrlShouldEndInSlashConstraintTests.Should_return_true_if_url_ends_in_a_slash" executed="True" result="Success" success="True" time="0.007" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="Store" executed="True" result="Success" success="True" time="0.838" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="ClientManagerTests+StoreManagerTests" executed="True" result="Success" success="True" time="0.832" asserts="0">
                            <results>
                              <test-case name="Source.UnitTests.Store.ClientApi.Store.ClientManagerTests+StoreManagerTests.FlagStore" executed="True" result="Success" success="True" time="0.406" asserts="1" />
                              <test-case name="Source.UnitTests.Store.ClientApi.Store.ClientManagerTests+StoreManagerTests.GetFBLikeMetadata" executed="True" result="Success" success="True" time="0.152" asserts="2" />
                              <test-case name="Source.UnitTests.Store.ClientApi.Store.ClientManagerTests+StoreManagerTests.GetStoreUserActivityStream" executed="True" result="Success" success="True" time="0.108" asserts="2" />
                              <test-case name="Source.UnitTests.Store.ClientApi.Store.ClientManagerTests+StoreManagerTests.GetTopNStoreUserActivityStream" executed="True" result="Success" success="True" time="0.082" asserts="2" />
                              <test-case name="Source.UnitTests.Store.ClientApi.Store.ClientManagerTests+StoreManagerTests.StoreContactUs" executed="True" result="Success" success="True" time="0.015" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="StoreProducts" executed="True" result="Success" success="True" time="0.349" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="StoreProductManagerTests+When_getting_a_paged_list_of_store_product_infos" executed="True" result="Success" success="True" time="0.344" asserts="0">
                            <results>
                              <test-case name="Source.UnitTests.Store.ClientApi.StoreProducts.StoreProductManagerTests+When_getting_a_paged_list_of_store_product_infos.Should_call_the_service_to_get_data" executed="True" result="Success" success="True" time="0.249" asserts="0" />
                              <test-case name="Source.UnitTests.Store.ClientApi.StoreProducts.StoreProductManagerTests+When_getting_a_paged_list_of_store_product_infos.Should_get_the_store_from_a_cookie" executed="True" result="Success" success="True" time="0.008" asserts="0" />
                              <test-case name="Source.UnitTests.Store.ClientApi.StoreProducts.StoreProductManagerTests+When_getting_a_paged_list_of_store_product_infos.Should_get_the_taxonomy_id_from_the_current_request" executed="True" result="Success" success="True" time="0.006" asserts="0" />
                              <test-case name="Source.UnitTests.Store.ClientApi.StoreProducts.StoreProductManagerTests+When_getting_a_paged_list_of_store_product_infos.Should_project_the_info_data_from_the_underlying_type" executed="True" result="Success" success="True" time="0.014" asserts="3" />
                              <test-case name="Source.UnitTests.Store.ClientApi.StoreProducts.StoreProductManagerTests+When_getting_a_paged_list_of_store_product_infos.Should_return_list_of_store_product_infos" executed="True" result="Success" success="True" time="0.012" asserts="2" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Web" executed="True" result="Failure" success="False" time="21.557" asserts="0">
                <results>
                  <test-suite type="Namespace" name="ClientApi" executed="True" result="Failure" success="False" time="17.975" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="Tests" executed="True" result="Failure" success="False" time="17.971" asserts="0">
                        <results>
                          <test-suite type="Namespace" name="Affiliates" executed="True" result="Success" success="True" time="0.148" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="AffiliateManagerTests" executed="True" result="Success" success="True" time="0.142" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.Affiliates.AffiliateManagerTests.BetaCodeMatchesAffiliateIdShouldCallSameServiceMethod" executed="True" result="Success" success="True" time="0.137" asserts="2" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite type="Namespace" name="Contents" executed="True" result="Failure" success="False" time="1.437" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="ContentManagerTests" executed="True" result="Failure" success="False" time="1.432" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.Contents.ContentManagerTests.DeleteContentShouldCallDeleteContent" executed="True" result="Error" success="False" time="0.501" asserts="0">
                                    <failure>
                                      <message><![CDATA[SetUp : StructureMap.StructureMapException : StructureMap Exception Code:  202
No Default Instance defined for PluginFamily Dell.Commerce.Web.ClientApi.Contents.IContentManager, Dell.Commerce.Web.ClientApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]></message>
                                      <stack-trace><![CDATA[at StructureMap.BuildSession.<.ctor>b__0(Type t) in c:\code\structuremap\Source\StructureMap\BuildSession.cs:line 31
at StructureMap.Util.Cache`2.get_Item(KEY key) in c:\code\structuremap\Source\StructureMap\Util\Cache.cs:line 82
at StructureMap.BuildSession.CreateInstance(Type pluginType) in c:\code\structuremap\Source\StructureMap\BuildSession.cs:line 192
at StructureMap.Container.GetInstance[T]() in c:\code\structuremap\Source\StructureMap\Container.cs:line 155
at Source.UnitTests.Web.ClientApi.Tests.Contents.ContentManagerTests.SetUp() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Web.ClientApi.Tests\Contents\ContentManagerTests.cs:line 53
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.Contents.ContentManagerTests.GetInitialListDataShouldCallServiceMethods" executed="True" result="Error" success="False" time="0.447" asserts="0">
                                    <failure>
                                      <message><![CDATA[SetUp : StructureMap.StructureMapException : StructureMap Exception Code:  202
No Default Instance defined for PluginFamily Dell.Commerce.Web.ClientApi.Contents.IContentManager, Dell.Commerce.Web.ClientApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]></message>
                                      <stack-trace><![CDATA[at StructureMap.BuildSession.<.ctor>b__0(Type t) in c:\code\structuremap\Source\StructureMap\BuildSession.cs:line 31
at StructureMap.Util.Cache`2.get_Item(KEY key) in c:\code\structuremap\Source\StructureMap\Util\Cache.cs:line 82
at StructureMap.BuildSession.CreateInstance(Type pluginType) in c:\code\structuremap\Source\StructureMap\BuildSession.cs:line 192
at StructureMap.Container.GetInstance[T]() in c:\code\structuremap\Source\StructureMap\Container.cs:line 155
at Source.UnitTests.Web.ClientApi.Tests.Contents.ContentManagerTests.SetUp() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Web.ClientApi.Tests\Contents\ContentManagerTests.cs:line 53
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite type="Namespace" name="Images" executed="True" result="Success" success="True" time="0.557" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="ImageManagerTests" executed="True" result="Success" success="True" time="0.551" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.Images.ImageManagerTests.CanRetrieveImageFromSlug" executed="True" result="Success" success="True" time="0.356" asserts="2" />
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.Images.ImageManagerTests.CanRetrieveImagesForCurrentUser" executed="True" result="Success" success="True" time="0.079" asserts="2" />
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.Images.ImageManagerTests.CanStoreImageFromImageItem" executed="True" result="Success" success="True" time="0.082" asserts="2" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite type="Namespace" name="Seo" executed="True" result="Failure" success="False" time="1.923" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="SeoManagerTests" executed="True" result="Failure" success="False" time="1.918" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.Seo.SeoManagerTests.GetStoreHealthShouldCallFindStoreHealth" executed="True" result="Error" success="False" time="0.517" asserts="0">
                                    <failure>
                                      <message><![CDATA[SetUp : StructureMap.StructureMapException : StructureMap Exception Code:  202
No Default Instance defined for PluginFamily Dell.Commerce.Web.ClientApi.Seo.ISeoManager, Dell.Commerce.Web.ClientApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]></message>
                                      <stack-trace><![CDATA[at StructureMap.BuildSession.<.ctor>b__0(Type t) in c:\code\structuremap\Source\StructureMap\BuildSession.cs:line 31
at StructureMap.Util.Cache`2.get_Item(KEY key) in c:\code\structuremap\Source\StructureMap\Util\Cache.cs:line 82
at StructureMap.BuildSession.CreateInstance(Type pluginType) in c:\code\structuremap\Source\StructureMap\BuildSession.cs:line 192
at StructureMap.Container.GetInstance[T]() in c:\code\structuremap\Source\StructureMap\Container.cs:line 155
at Source.UnitTests.Web.ClientApi.Tests.Seo.SeoManagerTests.SetUp() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Web.ClientApi.Tests\Seo\SeoManagerTests.cs:line 49
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.Seo.SeoManagerTests.GetStoreProductHealthShouldCallFindStoreHealth" executed="True" result="Error" success="False" time="0.454" asserts="0">
                                    <failure>
                                      <message><![CDATA[SetUp : StructureMap.StructureMapException : StructureMap Exception Code:  202
No Default Instance defined for PluginFamily Dell.Commerce.Web.ClientApi.Seo.ISeoManager, Dell.Commerce.Web.ClientApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]></message>
                                      <stack-trace><![CDATA[at StructureMap.BuildSession.<.ctor>b__0(Type t) in c:\code\structuremap\Source\StructureMap\BuildSession.cs:line 31
at StructureMap.Util.Cache`2.get_Item(KEY key) in c:\code\structuremap\Source\StructureMap\Util\Cache.cs:line 82
at StructureMap.BuildSession.CreateInstance(Type pluginType) in c:\code\structuremap\Source\StructureMap\BuildSession.cs:line 192
at StructureMap.Container.GetInstance[T]() in c:\code\structuremap\Source\StructureMap\Container.cs:line 155
at Source.UnitTests.Web.ClientApi.Tests.Seo.SeoManagerTests.SetUp() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Web.ClientApi.Tests\Seo\SeoManagerTests.cs:line 49
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.Seo.SeoManagerTests.TestGetTermAnalysisData" executed="True" result="Error" success="False" time="0.456" asserts="0">
                                    <failure>
                                      <message><![CDATA[SetUp : StructureMap.StructureMapException : StructureMap Exception Code:  202
No Default Instance defined for PluginFamily Dell.Commerce.Web.ClientApi.Seo.ISeoManager, Dell.Commerce.Web.ClientApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]></message>
                                      <stack-trace><![CDATA[at StructureMap.BuildSession.<.ctor>b__0(Type t) in c:\code\structuremap\Source\StructureMap\BuildSession.cs:line 31
at StructureMap.Util.Cache`2.get_Item(KEY key) in c:\code\structuremap\Source\StructureMap\Util\Cache.cs:line 82
at StructureMap.BuildSession.CreateInstance(Type pluginType) in c:\code\structuremap\Source\StructureMap\BuildSession.cs:line 192
at StructureMap.Container.GetInstance[T]() in c:\code\structuremap\Source\StructureMap\Container.cs:line 155
at Source.UnitTests.Web.ClientApi.Tests.Seo.SeoManagerTests.SetUp() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Web.ClientApi.Tests\Seo\SeoManagerTests.cs:line 49
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.Seo.SeoManagerTests.TestReturnCalculateContentSeo" executed="True" result="Error" success="False" time="0.451" asserts="0">
                                    <failure>
                                      <message><![CDATA[SetUp : StructureMap.StructureMapException : StructureMap Exception Code:  202
No Default Instance defined for PluginFamily Dell.Commerce.Web.ClientApi.Seo.ISeoManager, Dell.Commerce.Web.ClientApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]></message>
                                      <stack-trace><![CDATA[at StructureMap.BuildSession.<.ctor>b__0(Type t) in c:\code\structuremap\Source\StructureMap\BuildSession.cs:line 31
at StructureMap.Util.Cache`2.get_Item(KEY key) in c:\code\structuremap\Source\StructureMap\Util\Cache.cs:line 82
at StructureMap.BuildSession.CreateInstance(Type pluginType) in c:\code\structuremap\Source\StructureMap\BuildSession.cs:line 192
at StructureMap.Container.GetInstance[T]() in c:\code\structuremap\Source\StructureMap\Container.cs:line 155
at Source.UnitTests.Web.ClientApi.Tests.Seo.SeoManagerTests.SetUp() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Web.ClientApi.Tests\Seo\SeoManagerTests.cs:line 49
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite type="Namespace" name="Setup" executed="True" result="Success" success="True" time="1.621" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="SetupManagerTests" executed="True" result="Inconclusive" success="False" time="0.479" asserts="0" />
                              <test-suite type="TestFixture" name="SetupManagerTests+Seeding" executed="True" result="Success" success="True" time="0.629" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.Setup.SetupManagerTests+Seeding.ShouldCallStoreCatalogMethod" executed="True" result="Success" success="True" time="0.118" asserts="1" />
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.Setup.SetupManagerTests+Seeding.ShouldCallSystemAndStoreCatalogMethod" executed="True" result="Success" success="True" time="0.019" asserts="1" />
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.Setup.SetupManagerTests+Seeding.ShouldCallSystemCatalogMethod" executed="True" result="Success" success="True" time="0.007" asserts="1" />
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="SetupManagerTests+TestUserData" executed="True" result="Inconclusive" success="False" time="0.459" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="Namespace" name="SiteTraffic" executed="True" result="Failure" success="False" time="0.873" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="TrafficManagerTests" executed="True" result="Failure" success="False" time="0.868" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.SiteTraffic.TrafficManagerTests.GetTrafficUsingStoreAndStoreProductIdShouldCallRepositoryFind" executed="True" result="Error" success="False" time="0.468" asserts="0">
                                    <failure>
                                      <message><![CDATA[Rhino.Mocks.Exceptions.ExpectationViolationException : ITrafficService.Find(any, any, any, any, any); Expected #1, Actual #0.]]></message>
                                      <stack-trace><![CDATA[at Rhino.Mocks.RhinoMocksExtensions.AssertWasCalled[T](T mock, Action`1 action, Action`1 setupConstraints)
at Rhino.Mocks.RhinoMocksExtensions.AssertWasCalled[T](T mock, Func`2 action, Action`1 setupConstraints)
at Source.UnitTests.Web.ClientApi.Tests.SiteTraffic.TrafficManagerTests.GetTrafficUsingStoreAndStoreProductIdShouldCallRepositoryFind() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Web.ClientApi.Tests\SiteTraffic\TrafficManagerTests.cs:line 64
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.SiteTraffic.TrafficManagerTests.GetTrafficUsingStoreAndTenantIdShouldCallRepositoryFind" executed="True" result="Error" success="False" time="0.375" asserts="0">
                                    <failure>
                                      <message><![CDATA[Rhino.Mocks.Exceptions.ExpectationViolationException : ITrafficService.Find(any, any, any, any, any); Expected #1, Actual #0.]]></message>
                                      <stack-trace><![CDATA[at Rhino.Mocks.RhinoMocksExtensions.AssertWasCalled[T](T mock, Action`1 action, Action`1 setupConstraints)
at Rhino.Mocks.RhinoMocksExtensions.AssertWasCalled[T](T mock, Func`2 action, Action`1 setupConstraints)
at Source.UnitTests.Web.ClientApi.Tests.SiteTraffic.TrafficManagerTests.GetTrafficUsingStoreAndTenantIdShouldCallRepositoryFind() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Web.ClientApi.Tests\SiteTraffic\TrafficManagerTests.cs:line 55
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite type="Namespace" name="StoreProducts" executed="True" result="Success" success="True" time="5.970" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="StoreProductManagerTests" executed="True" result="Success" success="True" time="5.965" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.StoreProducts.StoreProductManagerTests.AddProductToStoreShouldCallCreateStoreProduct" executed="True" result="Success" success="True" time="1.594" asserts="2" />
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.StoreProducts.StoreProductManagerTests.AddProductToStoreShouldCallSendNewProductAddedNotification" executed="True" result="Success" success="True" time="0.668" asserts="2" />
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.StoreProducts.StoreProductManagerTests.FindAllMerchantsShouldCallSaveStoreProduct" executed="True" result="Success" success="True" time="0.592" asserts="2" />
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.StoreProducts.StoreProductManagerTests.GetProductOffersShouldCallFindProductOffersByMerchant" executed="True" result="Success" success="True" time="0.706" asserts="2" />
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.StoreProducts.StoreProductManagerTests.GetStoreProductGuidBoolShouldCallMethods" executed="True" result="Success" success="True" time="0.753" asserts="2" />
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.StoreProducts.StoreProductManagerTests.GetStoreProductShouldCallMethods" executed="True" result="Success" success="True" time="0.797" asserts="2" />
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.StoreProducts.StoreProductManagerTests.UpdateStoreProductShouldCallUpdateStoreProduct" executed="True" result="Success" success="True" time="0.780" asserts="2" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite type="Namespace" name="Stores" executed="True" result="Failure" success="False" time="4.255" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="StoreManagerTests" executed="True" result="Failure" success="False" time="4.250" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.Stores.StoreManagerTests.can_get_store_list_by_user_id" executed="True" result="Error" success="False" time="0.520" asserts="0">
                                    <failure>
                                      <message><![CDATA[SetUp : StructureMap.StructureMapException : StructureMap Exception Code:  202
No Default Instance defined for PluginFamily Dell.Commerce.Web.ClientApi.Store.IStoreManager, Dell.Commerce.Web.ClientApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]></message>
                                      <stack-trace><![CDATA[at StructureMap.BuildSession.<.ctor>b__0(Type t) in c:\code\structuremap\Source\StructureMap\BuildSession.cs:line 31
at StructureMap.Util.Cache`2.get_Item(KEY key) in c:\code\structuremap\Source\StructureMap\Util\Cache.cs:line 82
at StructureMap.BuildSession.CreateInstance(Type pluginType) in c:\code\structuremap\Source\StructureMap\BuildSession.cs:line 192
at StructureMap.Container.GetInstance[T]() in c:\code\structuremap\Source\StructureMap\Container.cs:line 155
at Source.UnitTests.Web.ClientApi.Tests.Stores.StoreManagerTests.Init() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Web.ClientApi.Tests\Stores\StoreManagerTests.cs:line 66
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.Stores.StoreManagerTests.CreateStoreCreatesModerationItem" executed="True" result="Error" success="False" time="0.450" asserts="0">
                                    <failure>
                                      <message><![CDATA[SetUp : StructureMap.StructureMapException : StructureMap Exception Code:  202
No Default Instance defined for PluginFamily Dell.Commerce.Web.ClientApi.Store.IStoreManager, Dell.Commerce.Web.ClientApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]></message>
                                      <stack-trace><![CDATA[at StructureMap.BuildSession.<.ctor>b__0(Type t) in c:\code\structuremap\Source\StructureMap\BuildSession.cs:line 31
at StructureMap.Util.Cache`2.get_Item(KEY key) in c:\code\structuremap\Source\StructureMap\Util\Cache.cs:line 82
at StructureMap.BuildSession.CreateInstance(Type pluginType) in c:\code\structuremap\Source\StructureMap\BuildSession.cs:line 192
at StructureMap.Container.GetInstance[T]() in c:\code\structuremap\Source\StructureMap\Container.cs:line 155
at Source.UnitTests.Web.ClientApi.Tests.Stores.StoreManagerTests.Init() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Web.ClientApi.Tests\Stores\StoreManagerTests.cs:line 66
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.Stores.StoreManagerTests.CreateStoreInitialViewShouldReturnSuccessfully" executed="True" result="Error" success="False" time="0.460" asserts="0">
                                    <failure>
                                      <message><![CDATA[SetUp : StructureMap.StructureMapException : StructureMap Exception Code:  202
No Default Instance defined for PluginFamily Dell.Commerce.Web.ClientApi.Store.IStoreManager, Dell.Commerce.Web.ClientApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]></message>
                                      <stack-trace><![CDATA[at StructureMap.BuildSession.<.ctor>b__0(Type t) in c:\code\structuremap\Source\StructureMap\BuildSession.cs:line 31
at StructureMap.Util.Cache`2.get_Item(KEY key) in c:\code\structuremap\Source\StructureMap\Util\Cache.cs:line 82
at StructureMap.BuildSession.CreateInstance(Type pluginType) in c:\code\structuremap\Source\StructureMap\BuildSession.cs:line 192
at StructureMap.Container.GetInstance[T]() in c:\code\structuremap\Source\StructureMap\Container.cs:line 155
at Source.UnitTests.Web.ClientApi.Tests.Stores.StoreManagerTests.Init() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Web.ClientApi.Tests\Stores\StoreManagerTests.cs:line 66
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.Stores.StoreManagerTests.GetCurrentStoreShouldCallDependentMethods" executed="True" result="Error" success="False" time="0.447" asserts="0">
                                    <failure>
                                      <message><![CDATA[SetUp : StructureMap.StructureMapException : StructureMap Exception Code:  202
No Default Instance defined for PluginFamily Dell.Commerce.Web.ClientApi.Store.IStoreManager, Dell.Commerce.Web.ClientApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]></message>
                                      <stack-trace><![CDATA[at StructureMap.BuildSession.<.ctor>b__0(Type t) in c:\code\structuremap\Source\StructureMap\BuildSession.cs:line 31
at StructureMap.Util.Cache`2.get_Item(KEY key) in c:\code\structuremap\Source\StructureMap\Util\Cache.cs:line 82
at StructureMap.BuildSession.CreateInstance(Type pluginType) in c:\code\structuremap\Source\StructureMap\BuildSession.cs:line 192
at StructureMap.Container.GetInstance[T]() in c:\code\structuremap\Source\StructureMap\Container.cs:line 155
at Source.UnitTests.Web.ClientApi.Tests.Stores.StoreManagerTests.Init() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Web.ClientApi.Tests\Stores\StoreManagerTests.cs:line 66
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.Stores.StoreManagerTests.GetStoreTaxonomyNodesByStoreIdShouldReturnSuccessfully" executed="True" result="Error" success="False" time="0.452" asserts="0">
                                    <failure>
                                      <message><![CDATA[SetUp : StructureMap.StructureMapException : StructureMap Exception Code:  202
No Default Instance defined for PluginFamily Dell.Commerce.Web.ClientApi.Store.IStoreManager, Dell.Commerce.Web.ClientApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]></message>
                                      <stack-trace><![CDATA[at StructureMap.BuildSession.<.ctor>b__0(Type t) in c:\code\structuremap\Source\StructureMap\BuildSession.cs:line 31
at StructureMap.Util.Cache`2.get_Item(KEY key) in c:\code\structuremap\Source\StructureMap\Util\Cache.cs:line 82
at StructureMap.BuildSession.CreateInstance(Type pluginType) in c:\code\structuremap\Source\StructureMap\BuildSession.cs:line 192
at StructureMap.Container.GetInstance[T]() in c:\code\structuremap\Source\StructureMap\Container.cs:line 155
at Source.UnitTests.Web.ClientApi.Tests.Stores.StoreManagerTests.Init() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Web.ClientApi.Tests\Stores\StoreManagerTests.cs:line 66
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.Stores.StoreManagerTests.ProcessStoreTaxonomyNodeModificationsShouldCallCreateTaxonomyNode" executed="True" result="Error" success="False" time="0.456" asserts="0">
                                    <failure>
                                      <message><![CDATA[SetUp : StructureMap.StructureMapException : StructureMap Exception Code:  202
No Default Instance defined for PluginFamily Dell.Commerce.Web.ClientApi.Store.IStoreManager, Dell.Commerce.Web.ClientApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]></message>
                                      <stack-trace><![CDATA[at StructureMap.BuildSession.<.ctor>b__0(Type t) in c:\code\structuremap\Source\StructureMap\BuildSession.cs:line 31
at StructureMap.Util.Cache`2.get_Item(KEY key) in c:\code\structuremap\Source\StructureMap\Util\Cache.cs:line 82
at StructureMap.BuildSession.CreateInstance(Type pluginType) in c:\code\structuremap\Source\StructureMap\BuildSession.cs:line 192
at StructureMap.Container.GetInstance[T]() in c:\code\structuremap\Source\StructureMap\Container.cs:line 155
at Source.UnitTests.Web.ClientApi.Tests.Stores.StoreManagerTests.Init() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Web.ClientApi.Tests\Stores\StoreManagerTests.cs:line 66
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.Stores.StoreManagerTests.ProcessStoreTaxonomyNodeModificationsShouldCallDeleteTaxonomyNode" executed="True" result="Error" success="False" time="0.452" asserts="0">
                                    <failure>
                                      <message><![CDATA[SetUp : StructureMap.StructureMapException : StructureMap Exception Code:  202
No Default Instance defined for PluginFamily Dell.Commerce.Web.ClientApi.Store.IStoreManager, Dell.Commerce.Web.ClientApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]></message>
                                      <stack-trace><![CDATA[at StructureMap.BuildSession.<.ctor>b__0(Type t) in c:\code\structuremap\Source\StructureMap\BuildSession.cs:line 31
at StructureMap.Util.Cache`2.get_Item(KEY key) in c:\code\structuremap\Source\StructureMap\Util\Cache.cs:line 82
at StructureMap.BuildSession.CreateInstance(Type pluginType) in c:\code\structuremap\Source\StructureMap\BuildSession.cs:line 192
at StructureMap.Container.GetInstance[T]() in c:\code\structuremap\Source\StructureMap\Container.cs:line 155
at Source.UnitTests.Web.ClientApi.Tests.Stores.StoreManagerTests.Init() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Web.ClientApi.Tests\Stores\StoreManagerTests.cs:line 66
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.Stores.StoreManagerTests.ProcessStoreTaxonomyNodeModificationsShouldCallUpdateTaxonomyNode" executed="True" result="Error" success="False" time="0.453" asserts="0">
                                    <failure>
                                      <message><![CDATA[SetUp : StructureMap.StructureMapException : StructureMap Exception Code:  202
No Default Instance defined for PluginFamily Dell.Commerce.Web.ClientApi.Store.IStoreManager, Dell.Commerce.Web.ClientApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]></message>
                                      <stack-trace><![CDATA[at StructureMap.BuildSession.<.ctor>b__0(Type t) in c:\code\structuremap\Source\StructureMap\BuildSession.cs:line 31
at StructureMap.Util.Cache`2.get_Item(KEY key) in c:\code\structuremap\Source\StructureMap\Util\Cache.cs:line 82
at StructureMap.BuildSession.CreateInstance(Type pluginType) in c:\code\structuremap\Source\StructureMap\BuildSession.cs:line 192
at StructureMap.Container.GetInstance[T]() in c:\code\structuremap\Source\StructureMap\Container.cs:line 155
at Source.UnitTests.Web.ClientApi.Tests.Stores.StoreManagerTests.Init() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Web.ClientApi.Tests\Stores\StoreManagerTests.cs:line 66
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.Stores.StoreManagerTests.UpdateStoreCreatesModerationItem" executed="True" result="Error" success="False" time="0.449" asserts="0">
                                    <failure>
                                      <message><![CDATA[SetUp : StructureMap.StructureMapException : StructureMap Exception Code:  202
No Default Instance defined for PluginFamily Dell.Commerce.Web.ClientApi.Store.IStoreManager, Dell.Commerce.Web.ClientApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]></message>
                                      <stack-trace><![CDATA[at StructureMap.BuildSession.<.ctor>b__0(Type t) in c:\code\structuremap\Source\StructureMap\BuildSession.cs:line 31
at StructureMap.Util.Cache`2.get_Item(KEY key) in c:\code\structuremap\Source\StructureMap\Util\Cache.cs:line 82
at StructureMap.BuildSession.CreateInstance(Type pluginType) in c:\code\structuremap\Source\StructureMap\BuildSession.cs:line 192
at StructureMap.Container.GetInstance[T]() in c:\code\structuremap\Source\StructureMap\Container.cs:line 155
at Source.UnitTests.Web.ClientApi.Tests.Stores.StoreManagerTests.Init() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Web.ClientApi.Tests\Stores\StoreManagerTests.cs:line 66
]]></stack-trace>
                                    </failure>
                                  </test-case>
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite type="Namespace" name="SystemCatalog" executed="True" result="Success" success="True" time="0.344" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="SystemCatalogManagerTests" executed="True" result="Success" success="True" time="0.339" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.SystemCatalog.SystemCatalogManagerTests.GetInitialDataShouldCallFindTaxonomyNodes" executed="True" result="Success" success="True" time="0.246" asserts="0" />
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.SystemCatalog.SystemCatalogManagerTests.GetInitialDataShouldReturnData" executed="True" result="Success" success="True" time="0.024" asserts="2" />
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.SystemCatalog.SystemCatalogManagerTests.GetTaxonomyNodesShouldCallFindTaxonomyNodes" executed="True" result="Success" success="True" time="0.017" asserts="0" />
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.SystemCatalog.SystemCatalogManagerTests.GetTaxonomyNodesShouldReturnData" executed="True" result="Success" success="True" time="0.011" asserts="2" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite type="Namespace" name="User" executed="True" result="Success" success="True" time="0.369" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="UserManagerTests" executed="True" result="Success" success="True" time="0.363" asserts="0">
                                <results>
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.User.UserManagerTests.can_create_user" executed="True" result="Success" success="True" time="0.240" asserts="2" />
                                  <test-case name="Source.UnitTests.Web.ClientApi.Tests.User.UserManagerTests.can_get_all_user_roles" executed="True" result="Success" success="True" time="0.103" asserts="2" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Ui" executed="True" result="Failure" success="False" time="3.431" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="Admin" executed="True" result="Failure" success="False" time="3.004" asserts="0">
                        <results>
                          <test-suite type="Namespace" name="Tests" executed="True" result="Failure" success="False" time="2.999" asserts="0">
                            <results>
                              <test-suite type="Namespace" name="Controllers" executed="True" result="Failure" success="False" time="2.996" asserts="0">
                                <results>
                                  <test-suite type="TestFixture" name="AffiliateControllerTests" executed="True" result="Success" success="True" time="0.132" asserts="0">
                                    <results>
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.AffiliateControllerTests.BetaCodeLoginShouldCallBetaCodeMatchesAffiliateId" executed="True" result="Success" success="True" time="0.055" asserts="1" />
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.AffiliateControllerTests.IsAffiliateEmailRegistered" executed="True" result="Success" success="True" time="0.006" asserts="2" />
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.AffiliateControllerTests.ShouldCallBothMethodsFromAffiliateListAction" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.AffiliateControllerTests.ShouldCallGetAffiliatesFromAffiliateListAction" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.AffiliateControllerTests.ShouldNotCallPerformBulkActionFromAffiliateListAction" executed="True" result="Success" success="True" time="0.008" asserts="1" />
                                    </results>
                                  </test-suite>
                                  <test-suite type="TestFixture" name="CommissionControllerTests" executed="True" result="Success" success="True" time="0.623" asserts="0">
                                    <results>
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.CommissionControllerTests.GetTrafficDataTest" executed="True" result="Success" success="True" time="0.030" asserts="0" />
                                    </results>
                                  </test-suite>
                                  <test-suite type="TestFixture" name="ContentControllerTests" executed="True" result="Success" success="True" time="0.123" asserts="0">
                                    <results>
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.ContentControllerTests.ContentBindingShouldCallGetContents" executed="True" result="Success" success="True" time="0.091" asserts="0" />
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.ContentControllerTests.DeleteShouldCallDeleteContent" executed="True" result="Success" success="True" time="0.014" asserts="0" />
                                    </results>
                                  </test-suite>
                                  <test-suite type="TestFixture" name="StoreProductControllerTests" executed="True" result="Success" success="True" time="0.382" asserts="0">
                                    <results>
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.StoreProductControllerTests.DeleteStoreProductById" executed="True" result="Success" success="True" time="0.027" asserts="0" />
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.StoreProductControllerTests.ProductDetailsEditShouldCallGetStoreProduct" executed="True" result="Success" success="True" time="0.079" asserts="0" />
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.StoreProductControllerTests.ProductDetailsReadShouldCallGetStoreProduct" executed="True" result="Success" success="True" time="0.010" asserts="0" />
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.StoreProductControllerTests.ProductDetailsSaveShouldCallSaveStoreProduct" executed="True" result="Success" success="True" time="0.017" asserts="0" />
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.StoreProductControllerTests.ProductOffersShouldCallGetProductOffers" executed="True" result="Success" success="True" time="0.072" asserts="0" />
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.StoreProductControllerTests.ProductShouldCallManagerMethods" executed="True" result="Success" success="True" time="0.088" asserts="0" />
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.StoreProductControllerTests.StarMyStoreProduct" executed="True" result="Success" success="True" time="0.011" asserts="0" />
                                    </results>
                                  </test-suite>
                                  <test-suite type="TestFixture" name="SystemCatalogControllerTests" executed="True" result="Success" success="True" time="0.288" asserts="0">
                                    <results>
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.SystemCatalogControllerTests.GetTaxonomyNodesShouldCallGetTaxonomyNodes" executed="True" result="Success" success="True" time="0.187" asserts="0" />
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.SystemCatalogControllerTests.GetTaxonomyNodesShouldReturnData" executed="True" result="Success" success="True" time="0.007" asserts="1" />
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.SystemCatalogControllerTests.IndexShouldCallGetInitialData" executed="True" result="Success" success="True" time="0.017" asserts="0" />
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.SystemCatalogControllerTests.ProductBindingShouldCallGetProductData" executed="True" result="Success" success="True" time="0.018" asserts="0" />
                                    </results>
                                  </test-suite>
                                  <test-suite type="TestFixture" name="SystemCatalogMangementControllerTests" executed="True" result="Success" success="True" time="0.857" asserts="0">
                                    <results>
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.SystemCatalogMangementControllerTests.ApproveOfferTest" executed="True" result="Success" success="True" time="0.094" asserts="1" />
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.SystemCatalogMangementControllerTests.AutoCompleteBrandTest" executed="True" result="Success" success="True" time="0.068" asserts="1" />
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.SystemCatalogMangementControllerTests.AutoCompleteManufacturerTest" executed="True" result="Success" success="True" time="0.068" asserts="1" />
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.SystemCatalogMangementControllerTests.AutoCompleteMerchantTest" executed="True" result="Success" success="True" time="0.065" asserts="1" />
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.SystemCatalogMangementControllerTests.CreateFeedTest" executed="True" result="Success" success="True" time="0.008" asserts="1" />
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.SystemCatalogMangementControllerTests.CreateProductTest" executed="True" result="Success" success="True" time="0.008" asserts="1" />
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.SystemCatalogMangementControllerTests.FindProductsTest" executed="True" result="Success" success="True" time="0.069" asserts="1" />
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.SystemCatalogMangementControllerTests.FindProductTest" executed="True" result="Success" success="True" time="0.009" asserts="1" />
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.SystemCatalogMangementControllerTests.GetFeedProviderTest" executed="True" result="Success" success="True" time="0.063" asserts="1" />
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.SystemCatalogMangementControllerTests.GetFeedsTest" executed="True" result="Success" success="True" time="0.073" asserts="1" />
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.SystemCatalogMangementControllerTests.GetNextPendingOfferTest" executed="True" result="Success" success="True" time="0.069" asserts="1" />
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.SystemCatalogMangementControllerTests.GetOffersTest" executed="True" result="Success" success="True" time="0.067" asserts="1" />
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.SystemCatalogMangementControllerTests.GetProductDetailTest" executed="True" result="Success" success="True" time="0.009" asserts="1" />
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.SystemCatalogMangementControllerTests.RejectOfferTest" executed="True" result="Success" success="True" time="0.008" asserts="1" />
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.SystemCatalogMangementControllerTests.UpdateProductInfoTest" executed="True" result="Success" success="True" time="0.007" asserts="1" />
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.SystemCatalogMangementControllerTests.UpdateProductOfferTest" executed="True" result="Success" success="True" time="0.009" asserts="1" />
                                    </results>
                                  </test-suite>
                                  <test-suite type="TestFixture" name="TrafficControllerTests" executed="True" result="Failure" success="False" time="0.468" asserts="0">
                                    <results>
                                      <test-case name="Source.UnitTests.Web.Ui.Admin.Tests.Controllers.TrafficControllerTests.TrafficBindingShouldCallGetTrafficList" executed="True" result="Error" success="False" time="0.463" asserts="0">
                                        <failure>
                                          <message><![CDATA[Rhino.Mocks.Exceptions.ExpectationViolationException : ITrafficManager.GetTrafficList(any, any, any, any, any, any); Expected #1, Actual #0.]]></message>
                                          <stack-trace><![CDATA[at Rhino.Mocks.RhinoMocksExtensions.AssertWasCalled[T](T mock, Action`1 action, Action`1 setupConstraints)
at Rhino.Mocks.RhinoMocksExtensions.AssertWasCalled[T](T mock, Func`2 action, Action`1 setupConstraints)
at Source.UnitTests.Web.Ui.Admin.Tests.Controllers.TrafficControllerTests.TrafficBindingShouldCallGetTrafficList() in c:\dev\Dell_Smp\trunk\Source.UnitTests\Web.Ui.Admin.Tests\Controllers\TrafficControllerTests.cs:line 48
]]></stack-trace>
                                        </failure>
                                      </test-case>
                                    </results>
                                  </test-suite>
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="Store" executed="True" result="Success" success="True" time="0.316" asserts="0">
                        <results>
                          <test-suite type="Namespace" name="Tests" executed="True" result="Success" success="True" time="0.312" asserts="0">
                            <results>
                              <test-suite type="Namespace" name="Controller" executed="True" result="Success" success="True" time="0.310" asserts="0">
                                <results>
                                  <test-suite type="TestFixture" name="ClientStoreControllerTests" executed="True" result="Success" success="True" time="0.168" asserts="0">
                                    <results>
                                      <test-case name="Source.UnitTests.Web.Ui.Store.Tests.Controller.ClientStoreControllerTests.FlagStore" executed="True" result="Success" success="True" time="0.136" asserts="0" />
                                      <test-case name="Source.UnitTests.Web.Ui.Store.Tests.Controller.ClientStoreControllerTests.StoreContactUs" executed="True" result="Success" success="True" time="0.018" asserts="2" />
                                    </results>
                                  </test-suite>
                                  <test-suite type="TestFixture" name="ExitControllerTests" executed="True" result="Success" success="True" time="0.123" asserts="0">
                                    <results>
                                      <test-case name="Source.UnitTests.Web.Ui.Store.Tests.Controller.ExitControllerTests.Index" executed="True" result="Success" success="True" time="0.119" asserts="0" />
                                    </results>
                                  </test-suite>
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="Namespace" name="Web" executed="True" result="Success" success="True" time="0.034" asserts="0">
        <results>
          <test-suite type="Namespace" name="ClientApi" executed="True" result="Success" success="True" time="0.031" asserts="0">
            <results>
              <test-suite type="Namespace" name="Tests" executed="True" result="Success" success="True" time="0.028" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Models" executed="True" result="Success" success="True" time="0.024" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="UIUXMessage" executed="True" result="Success" success="True" time="0.021" asserts="0">
                        <results>
                          <test-case name="Web.ClientApi.Tests.Models.UIUXMessage.CreateMessagesWithNoParameters" executed="True" result="Success" success="True" time="0.005" asserts="6" />
                          <test-case name="Web.ClientApi.Tests.Models.UIUXMessage.CreateMessagesWithParameters" executed="True" result="Success" success="True" time="0.002" asserts="6" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>